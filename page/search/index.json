[{"content":" 基本定义\n给定一个数集$A$，假设其中的元素为$x$，对$A$中的元素$x$施加对应法则$f$，记作$f(x)$，得到另一数集$B$，假设$B$中的元素为$y$，则$y$与$x$之间的等量关系可以用$y=f(x)$表示。\n幂函数\n所有幂函数一定过定点$(1,1)$.\n对于$y=x^k$，在$(0,+\\infty)$上均有定义。\n$k\u0026lt;0$时，在$x=0$上无意义。\n其余地按情况判定在$(-\\infty,0)$上是否有意义。\n指数函数\n对于函数$f(x)=a^x(a\u0026gt;0,a\\neq1)$，$D=R$，$f(x)=(0,+\\infty)$，非奇非偶，过定点$(0,1)$。\n当$a\u0026gt;1$时，函数在$R$上增。$a\u0026lt;1$时，函数在$R$上减。\n对数函数\n对于函数$f(x)=\\log_ax(a\u0026gt;0,a\\neq1)$，$D=(0,+\\infty)$，$f(x)\\in R$，非奇非偶，过定点$(1,0)$。 当$a\u0026gt;1$时，在$R$上单调增。$a\\in(0,1)$时，在$R$上单调减。 eg:\n2025虹口一模 函数$y=\\ln\\frac{x}{x-1}$的定义域是_____。\n求解$\\frac{x}{x-1}\u0026gt;0$，则$x\\in(-\\infty,0)\\cup(1,+\\infty)$，即$D=(-\\infty,0)\\cup(1,+\\infty)$。\n2025虹口一模 设$a\u0026gt;0$且$a\\neq1$，则函数$y=2+\\log_ax$图像恒过的定点为______\n$y=\\log_ax$过定点$(1,0)$，此函数将其向上平移$2$，故过定点$(1,2)$。\n奇偶性判定\n检查$D$是否关于原点对称。\n检查$f(x)=\\pm f(x)$是否成立（定义）。\n对非奇非偶函数的证明可以举反例。\n偶$\\pm$偶=偶，奇$\\times$偶=奇，偶$\\times$偶=偶\n奇偶性的性质\n若奇函数$y=f(x)$在$x=0$上有定义，则$f(0)=0$。\n证明时需注意：1.要在$x=0$上有定义；2.$f(0)=0$是$f(x)$为奇函数的必要非充分条件。\n有条件$f(x+T)=f(x)$的，可知$f(x)$存在周期性，$T$为函数的一个周期，但不一定是最小正周期。\n有条件$f(x+a)=f(b-x)$的，$f(x)$图像关于$x=\\frac{a+b}2$对称。\n单调性\n$\\forall x_1\u0026lt;x_2\\in D$， 若$f(x_1)\\leq f(x_2)$，则$f(x)$为$D$上的增函数。\n$f(x_1)\u0026lt;f(x_2)$，则$f(x)$在$D$上严格增。\n反之减函数、严格减（偷懒不写了）。\n复合函数的单调性：同增异减。 零点存在性定理：\n当$y=f(x)$在$D=[a,b]$上连续，$f(a)\\times f(b)\u0026lt;0$，则$f(x)$在$[a,b]$上至少存在一个实数$c$，使得$f(c)=0$。\n$c$是$f(x)$的一个零点。（零点不是$(c,0)$！！！！！）\n三角函数\n对于$f(x)=\\sin x$，$D=R$，$f(x)\\in[-1,1]$，$T_{\\min}=2\\pi$，在$[2k\\pi-\\frac\\pi2,2k\\pi+\\frac\\pi2]$上增，在$[2k\\pi+\\frac\\pi2,2k\\pi+\\frac32\\pi]$上减，奇函数，对称轴$x=k\\pi+\\frac\\pi2$，对称中心$(k\\pi,0)$。 对于$f(x)=\\cos x$，$D=R$，$f(x)\\in[-1,1]$，$T_{\\min}=2\\pi$，在$[2k\\pi-\\pi,2k\\pi]$上增，在$[2k\\pi,2k\\pi+\\pi]$上减，偶函数，对称轴$x=k\\pi$，对称中心$(k\\pi+\\frac\\pi2,0)$。 对于$f(x)=\\tan x$，$D={x|x\\neq k\\pi+\\frac\\pi2,k\\in Z}$，$f(x)\\in R$，$T_{\\min}=\\pi$，在$(k\\pi-\\frac\\pi2,k\\pi+\\frac\\pi2)$上增，无减区间，奇函数，无对称轴，对称中心$(\\frac{k\\pi}{2},0)$。 对于$y=A\\sin(\\omega x+\\varphi)$，$A$是振幅，$\\omega$是圆频率，$\\varphi$是初始相位。 辅助角公式$a\\sin x+b\\cos x=\\sqrt{a^2+b^2}\\sin(x+\\arctan\\frac ba)$。 eg:\n2025虹口一模 对$f(x)=\\sin\\omega x,x\u0026gt;0$，当$T_{min}=2\\pi$时，求$y=f(x)+\\cos x$在$[0,\\frac\\pi2]$上的最大值。\n$T=\\frac{2\\pi}{\\omega}=2\\pi\\Rightarrow\\omega=1$，\n$y=\\sin x+\\cos x=\\sqrt2\\sin(x+\\frac\\pi4)$。\n所以$x+\\frac\\pi4\\in[\\frac\\pi4,\\frac34\\pi]$。\n当$x+\\frac\\pi4=\\frac\\pi2$时，$x=\\frac\\pi4$，$y_{\\max}=2$。\n分段函数\n看着解就行了（）。\neg:\n2025虹口一模 已知$f(x)=\\begin{cases}x^2-x,x\\geq0\\\\f(-x),x\u0026lt;0\\end{cases}$，则$f(x)\\leq6$的解集为______\n分别针对$x\\geq0$时和$x\u0026lt;0$时求解。\n当$x\\geq0$时，$f(x)\\leq6\\Rightarrow x\\in[0,3]$。\n当$x\u0026lt;0$时，$f(x)\\leq6\\Rightarrow x\\in[-3,0)$\n两个解集取并，答案为$[-3,3]$。\n","date":"2025-01-03T19:05:03+08:00","permalink":"http://xfrozenx.top/post/hmath-function/","title":"Hmath Function"},{"content":"你需要拿一本必修二在手边，以查阅第2.12条内容。\n必修一 P24 新中国成立的意义\n彻底结束了旧中国半殖民地半封建社会的历史，彻底结束了极少数剥削者统治广大劳动人民 的历史，彻底结束了旧中国一盘散沙的局面，彻底废除了列强强加给中国的不平等条约和帝国主义在中国的一切特权，实现了中国从几千年封建专制政治向人民民主的伟大飞跃。 1956一化三改完成，中国社会主义制度建立，实现了中华民族有史以来最为广泛而深刻的社会变革。 一化三改：社会主义工业化，农业、手工业、资本主义工商业的社会主义改造。 必修二 L2\n市场经济的含义：使市场在资源配置中起决定性作用。 机制：价格机制、供求机制、竞争机制 优点：价格及其波动能反映供求状况的变化，市场竞争引导资源流向效率高的领域和企业。 市场类型：商品市场、服务市场、生产要素市场（劳动力市场、土地市场、金融市场、etc.） 市场的基本要素：交易双方、交易对象、交易价格 市场相互作用形成有机联系的市场体系，特点：统一开放，竞争有序，是市场在资源配置中起决定性作用的基础。 局限性：自发性、盲目性、滞后性。公共物品的供给、特殊物品的制造和流通不能由市场调节，与民生息息相关的重要服务不能完全由市场调节。 社会主义市场经济体制的基本特征：政府的宏观调控 重要特征：坚持党的领导，发挥党总揽全局，协调各方的领导核心作用。 根本目标：促进全体人民实现共同富裕 内在要求：科学的宏观调控、有效的政府治理 政府经济职能和作用（必修二 P23） 科学的宏观调控是政府的主要经济职能之一。 主要目标：促进经济增长、增加就业、稳定物价、保持国际收支平衡。 手段：财政政策和货币政策。 必修二 L3\n发展思想：以人民为中心 新发展理念：创新、协调、绿色、开放、共享 创新：解决发展动力问题 协调：解决发展不平衡问题 绿色：解决人与自然和谐共生问题 开放：解决发展内外联动问题 奉行互利共赢的开放战略 遵循共商共建共享原则，发展更高层次的开放型经济 新发展格局：以国内大循环为主体，国内国际双循环相互促进 “互利共赢“联系合作共赢：新型国际关系、对外开放的基本国策、中国对经济全球化的贡献（选必一） 发展方向：开放、包容、普惠、平衡、共赢 共享：解决社会公平正义问题 必修二 现代化经济体系\n多元平衡、安全高效的全面开放体系 提高现代化经济体系的国际竞争力，要更好利用全球资源和市场。 必修三 P30 党的执政方式\n科学执政：以马克思主义为指导，不断探索和遵循共产党执政规律、社会主义建设规律、人类社会发展规律。 民主执政：坚持为了人民执政，依靠人民执政。 依法执政：中国共产党执政的基本方式。党必须在宪法和法律的范围内活动。 必修三 P37 国家性质：工人阶级领导的、以工农联盟为基础的人民民主专政的社会主义国家。\n必修三 P43 国家职能\n对内：维护国家稳定，促进社会发展。 对外：防御外来侵略，保卫国家安全。 必修三 P38 全过程人民民主\n民主是党和中国人民始终不渝坚持的重要理念。 全过程人民民主是社会主义民主政治的本质属性，是最广泛、最真实、最管用的民主。 协商民主是我国社会主义民主政治的特有形式和独特优势。 必修三 P49 人大制度和人大代表\n人大代表权利：审议权、表决权、提案权、质询权。 人大制度：我国的根本政治制度（民主集中制原则），政体。 制度的基本功能：把体现广大人民群众根本利益的党的路线、方针、政策依照法定程序转化为国家意志。 优势：保障了人民当家做主、动员了全体人民以国家主人翁的姿态投身于社会主义建设、保证了国家机关协调高效运转、维护了国家统一和民族团结。是党把马克思主义基本原理同中国具体实际相结合的伟大创造，具有鲜明的中国特色和突出的制度优势。 必修三 P44 全国人大的含义、地位、职权\n全国人民代表大会：我国的最高权力机关。 人大权利：最高立法权、最高决定权、最高任免权、最高监督权 全国人大常委会的职权：立法权、决定权、任免权、监督权，以及全国人大授予的其他职权。\n必修四 P23 发挥主观能动性\n人能够能动地认识世界、改造世界。 尊重客观规律是正确发挥主观能动性的前提条件。 符合客观规律的正确意识才能有效发挥能动作用，违背客观规律的错误意识会对事物的发展产生阻碍作用。 必修四 P24 一切从实际出发\n一切从实际出发，实事求是。\n要求我们做事情要尊重物质运动的客观规律，从客观存在的事物出发，经过调查研究，找出事物本身固有的而不是臆造的规律性，作为我们行动的依据；\n要求我们充分发挥主观能动性，不断解放思想，与时俱进，以求真务实的精神探求事物的本质和规律，用科学的理论武装头脑、指导实践。\n要求我们遵从客观规律，充分发挥主观能动性，把发挥主观能动性和尊重客观规律结合起来，把高度的革命热情同严谨踏实的科学态度结合起来；既要反对夸大意识能动作用的的唯意志主义，又要反对片面强调客观条件，安于现状、因循守旧、无所作为的思想。\n必修四 P30 整体与部分、系统观念原理及其方法论。\n整体是事物的全局或发展的全过程。部分是事物的局部或者发展各个阶段，整体居于主导地位，整体统帅的部分具有部分所不具备的功能。部分在事物的存在和发展过程中处于被支配的地位部分服从和服务于整体。 原理：整体和部分相互联系，相互影响，在一定条件下相互转化。 方法论：掌握系统优化的方法，用综合的思维方法认识事物。要立足整体，把各个部分、各个要素联系起来考察，优化组合，选择最佳方案，实现整体的最优目标，从而达到整体功能大于部分功能之和的理想效果；同时必须重视部分的作用，用局部发展推动整体发展。 系统的基本特征：整体性、有序性、内部结构的优化趋向。 必修四 P33 量变和质变的关系原理及其方法论\n量变是质变的必要准备，质变是量变的必然结果，质变为新的量变开辟道路。 方法论：做任何事情都要从一点一滴的小事做起，脚踏实地，埋头苦干，重视量的积累，为实现事物的质变创造条件；在量变已经达到一定程度、只有改变事物原有的性质才能向前发展时，要果断抓住时机，促成质变，实现事物的飞跃。 必修四 P38 矛盾的普遍性与特殊性关系原理\n矛盾的普遍性和特殊性相互联结，普遍性寓于特殊性，特殊性离不开普遍性。任何事物都是普遍性和特殊性的对立统一。 必修四 P40 主要矛盾和次要矛盾、矛盾主要方面和次要方面及方法论\n主要矛盾：在事物发展过程中处于支配地位、对事物发展起决定作用的矛盾。 次要矛盾：其他处于从属地位、对事物发展不起决定作用的矛盾是次要矛盾。 主要矛盾和次要矛盾相互依赖、相互贯通，在一定条件下相互转化。数量一对多。 矛盾的主要方面：处于支配地位，起着主导作用的方面 次要方面：处于被支配地位。 事物的性质主要是由主要矛盾的主要方面决定的。矛盾的主要方面和次要方面相互依赖、相互贯通，在一定条件下相互转化。数量一对一。 选必一 P59 经济全球化的含义、特征\n含义：商品、服务及技术、资金、劳务等要素通过日益频繁的国际贸易、国际金融在国际范围内迅速流动和广泛配置，世界经济出现高度融合的局面。 特征：高度对外开放、深度相互依赖、全面相互融合。 选必一 P65 经济全球化的机遇与挑战\n机遇：是社会生产力发展的产物，又推动着社会生产力发展；为世界经济发展提供强劲动力；发展中国家参与其中有利于充分利用国际国内两种资源、两个市场，推动自身经济发展。 挑战：世界经济发展不平衡；不确定性和风险加剧。 选必一 P63 经济全球化的重要载体：跨国公司。\n选必一 P69 对外开放是我国的基本国策\n依托优势：依托我国超大规模市场优势，增强国内国际两个市场两种资源联动效应。 推动货物贸易优化升级，加快建设贸易强国。 合理缩减外资准入负面清单，营造市场化、法治化、国际化一流营商环境。 深度参与全球产业分工与合作。 发展更高层次的开放型经济。 发挥自身比较优势，提高竞争力。 负面清单管理是指政府规定哪些经济领域不开放。除了清单上的禁区，其他行业、领域和经济活动都许可。 比较优势：在两国之间，劳动生产率的差距并不是在任何产品上都是相等的。每个国家都应集中生产并出口具有比较优势的产品，进口具有比较劣势的产品，双方均可节省劳动力，获得专业化分工提高劳动生产率的好处。 选必一 P74 中国对经济全球化的贡献\n我国人民生活自改革开放以来得到极大改善，数亿贫困人口成功脱贫。 为世界各国提供了更广阔的市场、更充足的资本、更丰富的产品、更宝贵的合作机会。 改革开放持续跟进，为开放型世界经济的发展提供了重要动力。 选必一 P67 经济全球化的发展方向：开放、包容、普惠、平衡、共赢。\n选必二 P23 合同\n定义：民事主体之间设立、变更、终止民事法律关系的协议。 种类：买卖合同、赠与合同、租赁合同、运输合同等。 是各方当事人在自愿的基础上达成共识的意思表示，以实现各自利益。 合法合同受到法律保护。 格式条款：为了当事人重复使用而预先拟定，并在订立合同时未与对方协商的条款，如火车票的“乘车须知”。 要约：希望与他人订立合同的意思表示。 要约邀请：希望他人向自己发出要约的意思表示。 承诺：受要约人同意要约的意思表示。P24 合同全部或部分无效的情形： 合同内容违反法律、行政法规的强制性规定或违背公序良俗； 合同的主体不适格或因欺诈、胁迫导致当事人意思表示不真实。 主体适格：要求行为人有相应的民事行为能力。 有效合同要求行为人有相应的民事行为能力、意思表示真实、内容合法。 口头合同：当事人通过口头语言达成一致的意思表示。 书面合同：以合同书、信件、电报、电传、传真等可以有形地表现所载内容的形式订立的合同。包括电子数据交换、电子邮件等方式。 选必二 P30 违约责任\n承担方式：继续履行、采取补救措施、赔偿损失、支付违约金、适用定金罚则。\n定金是以确保合同履行为目的，由当事人一方在合同履行前预先交付于另一方的金钱。\n给付定金的一方不履行义务的，无权请求返还定金。\n收受定金的一方不履行义务的，应当双倍返还定金。\n保证金、押金、订金不属于定金。交订金时违约需退订金。\n选必二 P97 诉讼的原则\n谁主张谁举证的举证原则 以事实为依据，以法律为准绳 原告就被告 选必二 P62 劳动合同\n建立劳动关系，应当订立书面劳动合同。 必备条款：劳动合同期限、工作内容和工作地点、工作时间和休息休假、劳动报酬、社会保险、劳动保护、劳动条件和职业危害防护等。 订立劳动合同的原则：合法、公平、平等自愿、协商一致、诚实信用 劳动合同无效或部分无效的情形： 以欺诈、胁迫的手段或者乘人之危，使对方在违背真实意思的情况下订立或变更劳动合同的； 用人单位免除自己的法定责任、排除劳动者权利的； 违背法律、行政法规强制性规定的； 无效合同自订立起就没有法律约束力。劳动者已经劳动的，按本单位相同或相近岗位劳动者的劳动报酬确定。 用人单位必须按照合同约定履行对劳动者的各项义务，不得随意解除劳动合同。劳动者必须按照合同约定完成工作，并遵守用人单位的各项规章制度。 选必二 P65 劳动者的权利和义务\n权利 取得劳动报酬； 休息休假：职工每日工作八小时、每周工作四十小时，每周至少休息一日。有年休假。职工在年休假期间享受与正常工作期间相同的工资收入。 获得劳动安全卫生保护的权利； 享受社会保险和福利的权利； 平等就业和选择职业的权利；接受职业技能培训的权利；依法参加和组织工会的权利；参与民主管理的权利；提请劳动争议处理的权利； 义务 完成劳动任务，提高职业技能，执行劳动安全卫生规程，遵守劳动纪律和职业道德。 权利与义务相辅相成，不可分割。 ","date":"2024-11-05T19:52:43+08:00","permalink":"http://xfrozenx.top/post/202411midterm_pol/","title":"202411政治期中复习"},{"content":"树状数组是一种前缀和的优化方法。\n首先由$lowbit$函数引出。\n对于一个十进制数$x$，其$lowbit$值为这个数的二进制表达从低位起第一个1的位置所构成的数。\n例如，$13D=1101B,lowbit(13)=1D$.\n$40D=101000B,lowbit(40)=8D=1000B$.\n十进制数$x$的$lowbit$值可以用如下函数求得：\n$$ lowbit(x)=x\u0026amp;(-x) $$\n原理为：$-x$在求补码的过程中，会先修改符号位，再让其它位进行取反+1的操作。取反后二进制中的每一位与$x$均不相同，+1操作会让结尾连续的1变为0，并使得第一个0变为1，即补码中第一个1的位置与$x$第一个1的位置相同。\n对于下标$x$，在数组中存储第$x$个数前$lowbit(x)$个数字的值之和。\n例如，$x=40$时，$lowbit(x)=8$.\n$$ f[40]=a[40]+a[39]+a[38]+\u0026hellip;+a[34]+a[33] $$\n其中，$f$为树状数组，$a$为初始值。\n对$39$至$33$的二进制码研究后可以发现，其$lowbit(x)$位前保持不变，$lowbit$位的1改为0，$lowbit$位后枚举的是除了全0以外的所有情况。\n下图中展示的是$f[20]$以内的数组结构。\n其中，黑色数字为下标$x$，红色字为$lowbit(x)$。数字上方对应的绿色节点是$f[x]$存储了哪些项的和。\n以$f[5]$为例，如果改动了$f[5]$的数字，那么会影响到$f[6],f[8],f[16]$的值.\n我们可以得到以下结论：\n当改动树状数组中一项的值时，以这项值的下标加上$lowbit(x)$的值作为下标的数组内容也会发生改变。即：\n$$ f[x]改变，f[x+lowbit(x)]也改变。 $$\n由此，我们可以得到修改树状数组中元素的模板：\nvoid add(int p, int k){ while (p \u0026lt;= n){ f[p] += k; p += lowbit(p); } } //将下标p对应的值增加k 树状数组还可以求前缀和。例如：\n以$x=58$为例，$lowbit(x)=2,f[58]=a[57]+a[58]$.\n此时令$x=56$，$lowbit(x)=8,f[56]=a[56]+a[55]+\u0026hellip;+a[50]+a[49]$.\n以此类推，分别令$x=48$，$x=32$，并将其全部相加，即可得到$1$至$58$项的和。\n很容易发现，$x$需要以$lowbit(x)$为间隔向下递减求和。\n由此，我们可以得到其模板：\nint sum(int p){ int ans = 0; while (p \u0026gt; 0){ sum += f[p]; p -= lowbit(p); } } //求p的前綴和 求区间$[L,R]$的和，同前缀和一样，用如下方法求得即可：\n$$ s=f[L]-f[R-1] $$\n树状数组整体复杂度约为$O(\\log n)$.\n板子题：P3374 【模板】树状数组 1\nAC Code:\n//20231210 @ Hydro.ac #include\u0026lt;bits/stdc++.h\u0026gt; using namespace std; typedef long long ll; const int MAXN=500005; int n,m,k,a[MAXN],s[MAXN],f[MAXN],x,y; int lowbit(int p) { return p\u0026amp;(-p); } int sum(int p) { int ans=0; while(p\u0026gt;0) { ans+=f[p]; p-=lowbit(p); } return ans; } void add(int p,int k) { while(p\u0026lt;=n) { f[p]+=k; p+=lowbit(p); } } int main() { ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m; for(int i=1;i\u0026lt;=n;i++) { cin\u0026gt;\u0026gt;a[i]; s[i]=s[i-1]+a[i]; } for(int i=1;i\u0026lt;=n;i++) { f[i]=s[i]-s[i-lowbit(i)]; } while(m--) { int op;cin\u0026gt;\u0026gt;op; if(op==1) { cin\u0026gt;\u0026gt;x\u0026gt;\u0026gt;k; add(x,k); } else if(op==2) { cin\u0026gt;\u0026gt;x\u0026gt;\u0026gt;y; cout\u0026lt;\u0026lt;sum(y)-sum(x-1)\u0026lt;\u0026lt;\u0026#34;\\n\u0026#34;; } } return 0; } Ref.\n我的老师的课件（） ","date":"2023-12-10T18:13:21+08:00","permalink":"http://xfrozenx.top/post/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/","title":"树状数组"},{"content":"IAI727 202310月赛丙组T5 先修课程\n题目大意 一个有向图，有$n$个节点$m$条边，输入$n$和$m$和每条边的起点和终点。\n判断有向图的所有点是否都能在拓扑序中。能就输出Valid，否则输出Invalid。\n题解 看到原题有\n其中的第$i$条约束要求在学习第$y_i$ 门课程之前，必须先修完第$x_i$门课程。\n这样的优雅表述，判断可以用拓扑排序来解。\n拓扑排序是通过按照某个拓扑序的方法来遍历一张有向图。举个例子：\n这是一张有5个结点的有向图。遵循的原则是：\n当某个点的所有前驱节点都已被遍历时，这个点就可以被遍历。\n（可能不是前驱，但意思等同于前驱）\n例如，这张图中，1没有前驱节点。可以先遍历1，随后3没有别的前驱了，需要遍历3。此时点2的所有前驱都被遍历，可以遍历点2。此时4的所有前驱都被遍历，可以遍历点4。此时，5的前驱即3和4都被遍历，可以遍历5。本图的一种拓扑序即为1 3 2 4 5。\n一张图可能有多个拓扑序。例如将本图中1到3的边删掉，就可以有1 3 2 4 5和3 1 2 4 5两个拓扑序。\n回到本题。题目说的矛盾即为存在一个点无法被拓扑序遍历到。\n例如样例1的图，简单画一下就可以发现它没有任何一个节点是没有前驱节点的，拓扑序无从建起，自然是Invalid。\n那么推广一下，思路出来了：\n为图进行一次按照拓扑序的遍历，看看是否能够遍历到每一个点。如果不能遍历到每一个点，就是存在矛盾，输出Invalid。否则Valid。\n实现 用一个邻接表来存储有向图。\nconst int MAXN=200005; vector\u0026lt;int\u0026gt; v[MAXN]; 首先输入$n$,$m$的值，并建图。\n注意到，判断一个点是否有前驱，可以通过存储其入度的数量来简单判断。如果它的入度数量为0，那么它没有前驱。所以定义一个数组来存储某个点的入度数量。\ncin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m; for(int i=1;i\u0026lt;=m;i++) { int a,b; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b; v[a].push_back(b); d[b]++;//存入度数量的数组 int类型 } 看到刚才举的例子，当点1被遍历后，它下一个点可以选择遍历点2或者点3。但是点2还有别的前驱，点3没有了。所以遍历点3。\n那么这样，就可以通过bfs，将遍历到的点指向的点的入度都减去1，即”消去一条边“。当指向的点入度变成0的时候，入队，对它bfs。\nfor(int i=1;i\u0026lt;=n;i++)if(!d[i])q.push(i);//初始化 找拓扑序起点 while(!q.empty()) { int x=q.front();q.pop();//bfs cnt++;//记录遍历了多少个点 for(int i=0;i\u0026lt;v[x].size();i++) { int final=v[x][i]; d[final]--;//消边 if(!d[final])q.push(final);//如果指向的点没有别的前驱了就入队 } } 按照思路，我们统计一下遍历了多少个点，如果$cnt==n$，那么Valid。否则Invalid。\ncout\u0026lt;\u0026lt;((cnt!=n)?\u0026#34;Invalid\u0026#34;:\u0026#34;Valid\u0026#34;); AC Code\n//20231106 @ iai.sh.cn #include\u0026lt;bits/stdc++.h\u0026gt; using namespace std; typedef long long ll; const int MAXN=200005; int n,m,d[MAXN],cnt; vector\u0026lt;int\u0026gt; v[MAXN]; queue\u0026lt;int\u0026gt; q; int main() { ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); // freopen(\u0026#34;1.txt\u0026#34;,\u0026#34;r\u0026#34;,stdin); cin\u0026gt;\u0026gt;n\u0026gt;\u0026gt;m; for(int i=1;i\u0026lt;=m;i++) { int a,b; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b; v[a].push_back(b); d[b]++; } for(int i=1;i\u0026lt;=n;i++)if(!d[i])q.push(i); while(!q.empty()) { int x=q.front();q.pop(); cnt++; for(int i=0;i\u0026lt;v[x].size();i++) { int final=v[x][i]; d[final]--; if(!d[final])q.push(final); } } cout\u0026lt;\u0026lt;((cnt!=n)?\u0026#34;Invalid\u0026#34;:\u0026#34;Valid\u0026#34;); return 0; } ","date":"2023-11-06T22:26:37+08:00","permalink":"http://xfrozenx.top/post/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/","title":"拓扑排序"},{"content":"#OI - 时间复杂度\n单循环\neg Code\nvoid fun(int n) { int i = 0; while (i * i * i \u0026lt;= n) i++; } 次数 $0$ 1 2 条件（iii） 0 1 2^3 etc.\n规律：当执行至第$k$次时，条件数字即为$k^3$.\n设$k^3\\leq n$。令$n\\rightarrow\\infty$，则$k^3=n$.\n则$k=\\sqrt[3]{n}$.此算法的时间复杂度即为$O(\\sqrt{n})$.（略去了常数因子）\n例2\nvoid fun(int n) { int i = 1; while (i \u0026lt;= n) i *= 2; } 次数 $0$ 1 2 条件（i） 1 2 2^2 规律：同上，$2^k=n$，$k=\\log_2n$.\n$\\therefore O(\\log n)$.\n例3\nvoid fun(int n) { int x = 0; while (n \u0026gt;= (x + 1) * (x + 1)) x += 1; } 条件为$(x+1)^2$，同样列表可知$(k+1)^2=n$，$k=\\sqrt{n}-1$.\n在时间复杂度中，常数项一般略去。\n$\\therefore O(\\sqrt{n})$.\n多层循环\n情况1 - 外层不影响内层\nvoid fun(int n) { int count = 0; for (int k = 1; k \u0026lt;= n; k *= 2) for (int j = 1; j \u0026lt;= n; j++) count++; } 可看作是两个单循环。\n先计算外循环。同理列表，\n次数 0 1 2 条件 1 2 4 故$2^k=n$，$k=\\log_2n$.\n内循环同理列表，$O(n)$.\n整体算法的时间复杂度为内外循环相乘，$n\\log_2n$.\n此处注意，由于换底公式，$\\log_an$与$\\log_bn$仅有一个因子不同，故在计算时间复杂度时不论对数的底。\n算法的时间复杂度为$O(n\\log n)$.\n情况2 - 外层影响内层\n即内层的条件与外层有关。\nvoid fun(int n) { int m = 0, i, j; for (i = 1; i \u0026lt;= n; i++) for (int j = 1; j \u0026lt;= i * 2; j++) m++; } 首先介绍一些公式：\n$$ \\sum_{i=1}^ni=\\frac{n(n+1)}{2}$$ $$ \\sum_{i=1}^ni^2=\\frac{n(n+1)(2n+1)}{6} $$\n特殊地，对于常数列求和：\n$$ \\sum_{i=1}^nk=kn $$\n那么对于此题，可知：\n外层循环的循环次数为$\\sum_{i=1}^n$，内层为$\\sum_{j=1}^{2i}1$。\n两式相乘，得到\n$$ \\sum_{i=1}^n\\sum_{j=1}^{2i}1=\\sum_{i=1}^n2i $$$$ 由公式1，原式=\\frac{n(n+1)}{2} $$\n故总共执行$\\frac{n^2+n}{2}$次。时间复杂度$O(n^2)$.（取最高次）\n在计算好语句块的执行次数后，需要注意在整理成时间复杂度时略去常数因子，如$\\log_2n$的底、$\\sqrt[3]n$的根指数等，写成$O(\\log n)$、$O(\\sqrt n)$.\n","date":"2023-09-12T22:02:25+08:00","permalink":"http://xfrozenx.top/post/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/","title":"时间复杂度"},{"content":" 函数\n一组一起执行一个任务的语句。\n返回类型 函数名(参数类型1 参数名1,..,参数类型n 参数名n) { //函数体 return 返回值 } //对于void函数，不存在返回值。 递归函数\n自己调用自己的函数\neg. 阶乘\nint fact(int n) { if (n == 0) return 1; else return n * fact(n - 1); } 递归的一般形式\nint find(arg1, arg2...) { if (特殊情况 or 边界条件) { // 处理 return xxx; } // 递归操作； return xxx; } // 对于void函数，直接使用return; step型递归\n例题：天平平衡问题\n题目描述 你有n个重量不同的砝码和一个天平，每个砝码可以放在左盘或者右盘或者不放。砝码重量为 $w_1,w_2,\u0026hellip;,w_n$ ，问有多少种放置砝码的方式，使得天平平衡?（两边都不放任何砝码也算一种平衡方式）\n输入格式 第 1 行，1 个正整数 $n$ 。 第 2 行，$n$ 个正整数 $w_1,w_2,\u0026hellip;w_n$，以空格分隔。\n输出格式 输出使得天平平衡的放置方案数。\n输入输出样例 输入数据 1 5 1 2 3 5 6 输出数据 1 13 数据范围 对于 $100%$ 的数据，满足 $1\\leq n\\leq13,1\\leq w_i\\leq100$。\nAC Code\n// 20230712 @ Hydro.ac #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; int n, w[20], ans; void find(int p, int wl, int wr) { if (p \u0026gt; n) // 边界条件：如果已经枚举到超过n了 { if (wl == wr) { ans++; // 答案++ } return; } // 三种情况分别枚举递归 find(p + 1, wl + w[p], wr); find(p + 1, wl, wr + w[p]); find(p + 1, wl, wr); //这里的wl和wr也可以用全局变量写 //在调用之前要记得wl+=w[p]，调用完要减回去。称作回溯操作。 } int main() { cin \u0026gt;\u0026gt; n; for (int i = 1; i \u0026lt;= n; i++) { cin \u0026gt;\u0026gt; w[i]; } find(1, 0, 0); cout \u0026lt;\u0026lt; ans; return 0; } 深度优先搜索 DFS\n听起来好高大上 利用递归函数，枚举所有的情况找到答案。 剪枝 对于中途发现已经不可能的情况直接跳出这一部分搜索。 例题：P2089 烤鸡\n烤鸡 题目背景 猪猪 Hanke 得到了一只鸡。\n题目描述 猪猪 Hanke 特别喜欢吃烤鸡（本是同畜牲，相煎何太急！）Hanke 吃鸡很特别，为什么特别呢？因为他有 10 种配料（芥末、孜然等），每种配料可以放 1 到 3 克，任意烤鸡的美味程度为所有配料质量之和。\n现在， Hanke 想要知道，如果给你一个美味程度 $n$ ，请输出这 $10$ 种配料的所有搭配方案。\n输入格式 一个正整数 $n$，表示美味程度。\n输出格式 第一行，方案总数。\n第二行至结束，10 个数，表示每种配料所放的质量，按字典序排列。\n如果没有符合要求的方法，就只要在第一行输出一个 0。\n样例 #1 样例输入 #1 11 样例输出 #1 10 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 提示 对于 100% 的数据，$n \\leq 5000$。\nAC Code\n//20230712 @ Hydro.ac //不写注释了。我自己都不想再看一遍这代码。 #include\u0026lt;bits/stdc++.h\u0026gt; using namespace std; int n,counter=0,u[10000][15],u2[15]; void dfs(int p,int sum) { if(p==10) { if(sum==n) { counter++; for(int i=0;i\u0026lt;10;i++) { u[counter][i]=u2[i]; } } return; } for(int i=1;i\u0026lt;=3;i++) { u2[p]=i; dfs(p+1,sum+i); } return; } int main() { cin\u0026gt;\u0026gt;n; dfs(0,0); cout\u0026lt;\u0026lt;counter\u0026lt;\u0026lt;endl; for(int i=1;i\u0026lt;=counter;i++) { for(int j=0;j\u0026lt;10;j++) cout\u0026lt;\u0026lt;u[i][j]\u0026lt;\u0026lt;\u0026#34; \u0026#34;; cout\u0026lt;\u0026lt;endl; } return 0; } ","date":"2023-07-13T17:08:22+08:00","permalink":"http://xfrozenx.top/post/%E9%80%92%E5%BD%92%E6%B7%B1%E6%90%9C%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/","title":"递归、深搜及其优化"},{"content":" 质数判断\n让$i$从2枚举到$\\sqrt{N}$，若对每一个$i$$n%i\\neq0$，则是质数。否则是合数\nCode\nint n;bool prime=true; for(int i=2;i*i\u0026lt;=n;i++) if(d%i==0) { prime=false;break; } 筛法\n用于计算哪些数字是素数\n用bool型变量作为桶，记录某个数是否为素数。\n埃式筛法\n将isPrime[N]数组初始化为false，即均为质数。\nisPrime[0]=isPrime[1]=true;\n从2开始枚举，若是质数，将其所有的倍数记录为合数。\nCode\nisprime[0] = isprime[1] = true; for (int i = 2; i * i \u0026lt;= n; i++) { if (!isprime[i]) { for (int j = i * i; j \u0026lt;= n; j += i) { isprime[j] = true; } } } 线性筛法\n用每个数的最小质因数进行标记。\nCode\n（有点问题，之后补）\nGCD \u0026amp; LCM\nGCD $GCD(a,b)=GCD(b,a%b)$。（辗转相除） LCM $LCM(a,b)\\times GCD(a,b)=a\\times b$. 快速幂\n$ans=a^b%p$时，快速求ans。\nans = 1; while (b) { if (b \u0026amp; 1) { ans *= a; ans %= p; } a *= a; a %= p; b \u0026gt;\u0026gt;= 1; } cout \u0026lt;\u0026lt; ans; ","date":"2023-07-11T19:22:52+08:00","permalink":"http://xfrozenx.top/post/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/","title":"基础数论"},{"content":" 前缀和\nDef. 某数组前若干数的和\n设一数组$a$，$s[1]=a[1]$，$s[2]=a[1]+a[2]$，\n$s[n]=a[1]+a[2]+\u0026hellip;+a[n-1]+a[n]$.\n用此方法求区间$[l,r]$的和\n$$ s_{lr}=s[r]-s[l-1] $$\n相较于$for$循环求若干数的和，前缀和这一算法能将时间复杂度由$O(n)$降为$O(1)$。\n前缀和属于优化类算法。\n差分\nDef. 是这个数与前一个数的差\n设一数组$a$，则有\n$$ d[1]=a[1]\\d[2]=a[2]-a[1]\\d[3]=a[3]-a[2]\\d[n]=a[n]-a[n-1] $$\n******注意！！！$a[0]=0$.\n差分多用于对区间$[l,r]$中的每一项都进行相同的修改（加减）\n例题可见 Hydro B0409或洛谷P2367。\n对于普通的数组，使某区间内的每一项进行相同加减，需要用$for$循环，做如下操作\n$$ a[l]+=c\\a[l+1]+=c\\\u0026hellip;\u0026hellip;\\O(n) $$\n对于差分数组，只需要做\n$$ d[l]+=c\\d[r+1]-=c\\O(1) $$\n故与前缀和一样，是优化类算法。同时，差分算法是前缀和的逆运算。\n根据差分数列反求出修改后的原数列\n可使用如下代码\nfor(int i=1;i\u0026lt;=n;i++) { d[i]+=d[i-1]; cout\u0026lt;\u0026lt;d[i]\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } 我好像也不太理解 但是先背着吧\n二维前缀和\n即针对二维的$a$数组的前缀和操作。\n偷懒直接上图。\n尺取法（Two pointers）\n无法评述。参见例题。 P1147 连续自然数和 题目描述 对一个给定的正整数 $M$，求出所有的连续的正整数段（每一段至少有两个数），这些连续的自然数段中的全部数之和为 $M$。\n例子：$1998+1999+2000+2001+2002 = 10000$，所以从 $1998$ 到 $2002$ 的一个自然数段为 $M=10000$ 的一个解。\n输入格式 包含一个整数的单独一行给出 $M$ 的值（$10 \\le M \\le 2,000,000$）。\n输出格式 每行两个正整数，给出一个满足条件的连续正整数段中的第一个数和最后一个数，两数之间用一个空格隔开，所有输出行的第一个按从小到大的升序排列，对于给定的输入数据，保证至少有一个解。\n样例 #1 样例输入 #1 10000 样例输出 #1 18 142 297 328 388 412 1998 2002 AC Code\n//20230707 @ Hydro.ac //尺取法 #include\u0026lt;bits/stdc++.h\u0026gt; using namespace std; int m,sum=0; int main() { cin\u0026gt;\u0026gt;m; for(int l=1,r=1;r\u0026lt;m;r++) { sum+=r; while(sum\u0026gt;m)//如果总和大于m { sum-=l;//在总和中删掉起点 l++; } if(sum==m) cout\u0026lt;\u0026lt;l\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;r\u0026lt;\u0026lt;endl; } return 0; } ","date":"2023-07-07T18:33:08+08:00","permalink":"http://xfrozenx.top/post/%E5%89%8D%E7%BC%80%E5%92%8C-%E5%B7%AE%E5%88%86-%E5%B0%BA%E5%8F%96%E6%B3%95/","title":"前缀和 差分 尺取法"},{"content":" 二分查找（查找特定值）\n定义查找区间的左右端点$l$和$r$，查找区间$[l,r]$. 当$l\\leq r$时，计算中间值$mid=(l+r)/2=l+(r-l)/2$. 若$mid=k$，则找到答案 若$mid\u0026gt;k$，则设$r=mid-1$，继续搜索 若$mid\u0026lt;k$，则设$l=mid+1$，继续搜索 当$l\u0026gt;r$时，原区间$[l.r]$内不存在$k$。 模板代码： while (l \u0026lt;= r) { int mid = (l + r) / 2; if (a[mid] == b) { // 找到此数 break; } if (a[mid] \u0026gt; b) r = mid - 1; else l = mid + 1; } 二分查找（查找第一个满足条件的位置）\n初始赋值：$l$是一个不满足条件的位置，$r$是一个满足条件的位置。 当$l+1\u0026lt;r$，即$l$和$r$不相邻时，计算中间端点$mid=(l+r)/2=l+(r-l)/2$. 若$mid$满足条件，设$r=mid$，继续搜索 若$mid$不满足条件，设$l=mid$，继续搜索 当$l+1=r$时，$r$为第一个满足条件的位置。 模板代码 while (l + 1 \u0026lt; r) { int mid = (l + r) / 2; if (a[mid] \u0026gt;= k) r = mid; else l = mid; } 二分答案\n使用二分查找的思路，通过对if的条件加以修改，得到答案，即为二分查找。 ","date":"2023-07-05T18:31:21+08:00","permalink":"http://xfrozenx.top/post/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%92%8C%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/","title":"二分查找和二分答案"},{"content":" Carpet Extra Carpet Extra is an extension adding extra features to Fabric Carpet, like countless new dispenser behaviours, new ways to get resources in a renewable way and many others!\nFor its enabled dispenser behaviours it also adds a new Scarpet event that triggers when those happen, allowing you to further customize them.\nMore extensions If you\u0026rsquo;re looking for Carpet autocrafting table, it has been moved to a standalone extension you can find on its repository on Github.\nThere are also lots of other carpet extensions out there, adding countless new rules and functionality! You can find a list of them in the Carpet wiki.\nCarpet Extra Features Carpet Mod Settings accurateBlockPlacement Client can provide alternative block placement.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, SURVIVAL autoCraftingDropper Auto-crafting dropper\nIf a dropper points into a crafting table and contains a valid 3x3 crafting recipe, firing that\ndropper will cause it to craft (drop as item) that recipe.\nOverrides comparators so they indicate number of filled slots instead.\nAlso makes hoppers, droppers and dispensers input max 1 item per slot.\nType: Boolean Default value: false Allowed options: true, false Categories: CREATIVE, EXTRAS, DISPENSER betterBonemeal Bonemeal can be used to grow sugarcane, cactus and lily pads.\nType: Boolean Default value: false Allowed options: true, false Categories: FEATURE, EXTRAS, SURVIVAL blazeMeal Blaze powder fertilizes netherwart.\nVia dispenser or player right click actions.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, SURVIVAL blockStateSyncing Fixes block states in F3 debug mode not updating for some blocks.\nMay cause increased network traffic.\nWorks with cactus, sugar cane, saplings, hoppers, dispensers and droppers.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, EXPERIMENTAL chickenShearing Chickens can be sheared to get feathers. Beware! every time u shear a chicken, it gets damaged!\nBaby chickens can\u0026rsquo;t be sheared.\nAlso works with dispensers\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, DISPENSER clericsFarmWarts Clerics can warm nether farts.\nThis will also allow them to pick up wart items, as well as pathfind to soulsand.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE commandPing Enables /ping for players to get their ping.\nType: Boolean Default value: true Allowed options: true, false Categories: COMMAND, EXTRAS Additional notes: It has an accompanying command comparatorBetterItemFrames Allows Comparators to see item frames that are horizontal in front of them and on top the the block in front of them\nBehind: Allows comparators to detect item frames in the block behind them\nLenient: Allows comparators to detect any item frames within the block behind a full block\nExtended: Allows comparators to detect item frames on a full block behind the comparator\nType: ComparatorOptions Default value: vanilla Allowed options: vanilla, behind, lenient, extended Categories: FEATURE, EXTRAS, EXPERIMENTAL comparatorReadsClock Allows Comparators to read the daytime instead of the rotation of clocks in item frames.\nType: Boolean Default value: false Allowed options: true, false Categories: FEATURE, EXTRAS, EXPERIMENTAL creeperSpawningInJungleTemples Only creepers spawn in jungle temples.\nType: Boolean Default value: false Allowed options: true, false Categories: FEATURE, EXTRAS disablePlayerCollision Disables player entity collision.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, CREATIVE, EXPERIMENTAL dispenserPlacesBlocks Dispensers can place blocks.\nType: Boolean Default value: false Allowed options: true, false Categories: CREATIVE, EXTRAS, DISPENSER dispensersCarvePumpkins Dispensers containing shears can carve pumpkins.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, DISPENSER dispensersFeedAnimals Dispensers can feed animals if given their breeding item.\nCan also feed flowers to brown mooshrooms to give them a suspicious stew effect\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, EXPERIMENTAL, FEATURE, DISPENSER dispensersFillMinecarts Minecarts can be filled with hoppers, chests, tnt and furnace.\nType: Boolean Default value: false Allowed options: true, false Categories: EXPERIMENTAL, FEATURE, EXTRAS, DISPENSER dispensersMilkAnimals Dispensers with empty buckets can milk cows/mooshrooms/goats, and get mushroom/suspicious stew from mooshrooms with bowls.\nType: Boolean Default value: false Allowed options: true, false Categories: EXPERIMENTAL, EXTRAS, FEATURE, DISPENSER dispensersPlaceBoatsOnIce Dispensers can place boats on ice\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, DISPENSER dispensersPlayRecords Dispensers can play records if there\u0026rsquo;s a jukebox in front of them.\nIf a record already exists in the jukebox, it gets placed back in the dispenser.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, DISPENSER dispensersPotPlants Dispensers can put flowers in flower pots\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, DISPENSER dispensersStripBlocks Dispensers with axes can strip blocks\nCan strip logs, remove oxidation, and remove wax\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, DISPENSER dispensersTillSoil Dispensers with hoes can till soil.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, DISPENSER dispensersToggleThings Dispensers containing a stick can toggle/activate things.\nWorks with buttons, redstone, noteblocks, comparators, repeaters,\ndaylight detectors, etc.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, EXPERIMENTAL, FEATURE, DISPENSER dispensersUseCauldrons Dispensers can empty/fill cauldrons with buckets or bottles, and undye leather armor/shulker boxes/banners\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, DISPENSER doubleRetraction Re-adds 1.8 double retraction to pistons.\nGives pistons the ability to double retract without side effects.\nFixes MC-88959.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, EXPERIMENTAL dragonEggBedrockBreaking Reintroduce the Dragon Egg Bedrock breaking bug from 1.12.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, EXPERIMENTAL emptyShulkerBoxStackAlways Empty Shulker Boxes will always stack, even inside inventories.\nType: Boolean Default value: false Allowed options: true, false Categories: FEATURE, EXTRAS, EXPERIMENTAL enderPearlChunkLoading Allow horizontally moving Ender Pearls to load chunks as entity ticking.\nType: Boolean Default value: false Allowed options: true, false Categories: FEATURE, EXTRAS fallingBlockDispensers Dispensers/Droppers with a block in front of them when powered will turn that block into a falling block\ndispenser \u0026amp; dropper give the same velocity to the falling block like they do in 22w13oneblockatatime\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, DISPENSER flowerPotChunkLoading Placing a wither rose in a flowerpot will load that chunk.\nIf u enable the rule the already existing chunks with flowerpots won\u0026rsquo;t be loaded.\nAlso disabling the carpet rule won\u0026rsquo;t remove the loaded chunks, u need to manually unload them using the /forceload command.\nAll the loaded chunks can be seen using /forceload query\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, EXPERIMENTAL hopperMinecart8gtCooldown Makes Hopper Minecarts have an 8gt cooldown like hoppers.\nType: Boolean Default value: false Allowed options: true, false Categories: BUGFIX, FEATURE, EXTRAS, EXPERIMENTAL hopperMinecartItemTransfer Allows Hopper Minecarts to transfer items into containers below them.\nType: Boolean Default value: false Allowed options: true, false Categories: BUGFIX, FEATURE, EXTRAS, EXPERIMENTAL maxSpongeRange Maximum offset limit for sponge.\nType: Integer Default value: 7 Suggested options: 7 Categories: FEATURE, EXTRAS maxSpongeSuck Maximum water sucking for sponge.\nType: Integer Default value: 64 Suggested options: 64 Categories: FEATURE, EXTRAS mobInFireConvertsSandToSoulsand If a living entity dies on sand with fire on top the sand will convert into soul sand.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE, EXPERIMENTAL pistonRedirectsRedstone Pistons and sticky pistons redirect redstone\nWhen retracting, they will blink visually\nbut that\u0026rsquo;s only to minimize changes required for it to work\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE reloadSuffocationFix Won\u0026rsquo;t let mobs glitch into blocks when reloaded.\nCan cause slight differences in mobs behaviour.\nFixes MC-2025.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, BUGFIX, EXPERIMENTAL renewableEndstone Dragon\u0026rsquo;s breath from dispensers convert cobblestone to end stone.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, EXPERIMENTAL, DISPENSER renewableIce Multiple ice crushed by falling anvils make denser ice.\nfrosted turns into normal, normal into packed and packed into blue\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, EXPERIMENTAL, FEATURE renewableNetherrack Fire charges from dispensers convert cobblestone to netherrack.\nCredits: Skyrising\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, EXPERIMENTAL renewableSand Cobblestone crushed by falling anvils makes sand.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, EXPERIMENTAL, FEATURE renewableWitherSkeletons Skeletons turn into wither skeletons when struck by lightning.\nType: Boolean Default value: false Allowed options: true, false Categories: FEATURE, EXTRAS repeaterPriorityFix Quick pulses won\u0026rsquo;t get lost in repeater setups.\nProbably brings back pre 1.8 behaviour.\nFixes MC-54711.\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, BUGFIX, EXPERIMENTAL scaffoldingDistance Max distance for scaffolding.\nType: Integer Default value: 7 Suggested options: 2, 3, 5, 7 Categories: FEATURE, EXTRAS Additional notes: You must choose a value from 0 to 7 spiderJockeysDropGapples Gives Spider jockeys a specified chance to drop enchanted golden apples.\n0 is the default setting, no enchanted golden apples will be dropped\nType: Integer Default value: 0 Suggested options: 0, 50, 100 Categories: EXTRAS, FEATURE Additional notes: You must choose a value from 0 to 100 straySpawningInIgloos Only strays spawn in igloos.\nType: Boolean Default value: false Allowed options: true, false Categories: FEATURE, EXTRAS variableWoodDelays Variable delays on wooden components (buttons, pressure plates).\nType: Boolean Default value: false Allowed options: true, false Categories: EXTRAS, FEATURE y0DragonEggBedrockBreaking Let dragon eggs break Y0 bedrock.\nRequires dragonEggBedrockBreaking to be set to true.\nType: Boolean Default value: false Allowed options: true, false Categories: EXPERIMENTAL, EXTRAS ","date":"2023-07-02T11:41:46+08:00","permalink":"http://xfrozenx.top/post/carpet-extra/","title":"Carpet Extra"},{"content":" 算法是一系列的计算步骤，用来将输入的数据转化成输出的结果。 特征： 有穷性 确定性 可行性 有零个或多个输入 至少有一个输出 描述方法： 自然语言\n流程图 1.\nflowchart TD id1([\u0026#34;起止框（表示算法开始和结束）\u0026#34;]) --\u0026gt;id2[\u0026#34;处理框（要处理的内容）\u0026#34;] --\u0026gt;id3[/\u0026#34;输入/输出框\u0026#34;/] --\u0026gt;id4{\u0026#34;判断框\u0026#34;} --\u0026gt;id5((\u0026#34;连接符\u0026#34;)) 伪代码\n基本控制结构 顺序结构\nflowchart TD A[\u0026#34;操作1\u0026#34;]--\u0026gt;B[\u0026#34;操作2\u0026#34;] 分支结构\nflowchart TD A[\u0026#34;操作1\u0026#34;]--\u0026gt;B{\u0026#34;条件\u0026#34;} B--\u0026gt;|是| C[\u0026#34;操作2\u0026#34;] B--\u0026gt;|否| D[\u0026#34;操作3\u0026#34;] C \u0026amp; D --\u0026gt;E[\u0026#34;分支外的操作\u0026#34;] 循环结构\n当循环\nflowchart TD A{\u0026#34;条件\u0026#34;} A--\u0026gt;|是| B[\u0026#34;循环体\u0026#34;] B--\u0026gt;A A---\u0026gt;|否| C[\u0026#34;循环外的操作\u0026#34;] 直到循环\nflowchart TD A[\u0026#34;循环体\u0026#34;]--\u0026gt;B{\u0026#34;条件\u0026#34;} B--\u0026gt;|否|A B--\u0026gt;|是|C[\u0026#34;循环外的操作\u0026#34;] ","date":"2023-06-15T22:55:55+08:00","permalink":"http://xfrozenx.top/post/%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","title":"算法的基本概念"},{"content":" 信息技术革命促使信息社会到来。\n农业社会—\u0026gt;工业社会—\u0026gt;信息社会\n信息社会是以信息活动为基础的社会。\n基本原则：以人为本、包容性、全面发展 资源：信息、知识 本质：以信息活动为基础 信息社会的特征：\n信息经济 指以信息与知识的生产、分配、拥有、使用为主要特征的经济形态。 是决定信息社会发展水平高低的最主要因素。 在线政务 指利用现代化信息技术实现社会管理和公共服务的新型政府治理模式。 特征：公开透明、高效治理、互动参与 数字生活 体现在生活工具、生活方式、生活内容的数字化。 网络社会 是信息社会最典型的特征。 信息系统\n是指在社会活动中，以满足信息需求为目标，以现代信息技术为手段，实现对信息有效采集和输入、传输、存储、处理、输出和利用而建立的包含人、硬件、软件、数据在内的综合系统。 要素：人、硬件、软件、数据 功能：信息的采集和输入、传输、存储、处理、输出和利用 ","date":"2023-05-29T22:20:08+08:00","permalink":"http://xfrozenx.top/post/hit-%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E4%B8%8E%E7%A4%BE%E4%BC%9A/","title":"信息技术与社会"},{"content":"#include\u0026lt;bits/stdc++.h\u0026gt; Inline math test When $ a \\neq 0 $, we can find $$ x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a} $$ helloworld123456789 你好\n","date":"2023-05-25T22:36:21+08:00","permalink":"http://xfrozenx.top/post/hello_world/","title":"Hello_world"}]