<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Frozen Blog</title>
        <link>http://xfrozenx.top/post/</link>
        <description>Recent content in Posts on Frozen Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 10 Dec 2023 18:13:21 +0800</lastBuildDate><atom:link href="http://xfrozenx.top/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>树状数组</title>
        <link>http://xfrozenx.top/post/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</link>
        <pubDate>Sun, 10 Dec 2023 18:13:21 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</guid>
        <description>&lt;p&gt;树状数组是一种前缀和的优化方法。&lt;/p&gt;
&lt;p&gt;首先由$lowbit$函数引出。&lt;/p&gt;
&lt;p&gt;对于一个十进制数$x$，其$lowbit$值为这个数的二进制表达从低位起第一个1的位置所构成的数。&lt;/p&gt;
&lt;p&gt;例如，$13D=1101B,lowbit(13)=1D$.&lt;/p&gt;
&lt;p&gt;$40D=101000B,lowbit(40)=8D=1000B$.&lt;/p&gt;
&lt;p&gt;十进制数$x$的$lowbit$值可以用如下函数求得：&lt;/p&gt;
&lt;p&gt;$$
lowbit(x)=x&amp;amp;(-x)
$$&lt;/p&gt;
&lt;p&gt;原理为：$-x$在求补码的过程中，会先修改符号位，再让其它位进行取反+1的操作。取反后二进制中的每一位与$x$均不相同，+1操作会让结尾连续的1变为0，并使得第一个0变为1，即补码中第一个1的位置与$x$第一个1的位置相同。&lt;/p&gt;
&lt;p&gt;对于下标$x$，在数组中存储第$x$个数前$lowbit(x)$个数字的值之和。&lt;/p&gt;
&lt;p&gt;例如，$x=40$时，$lowbit(x)=8$.&lt;/p&gt;
&lt;p&gt;$$
f[40]=a[40]+a[39]+a[38]+&amp;hellip;+a[34]+a[33]
$$&lt;/p&gt;
&lt;p&gt;其中，$f$为树状数组，$a$为初始值。&lt;/p&gt;
&lt;p&gt;对$39$至$33$的二进制码研究后可以发现，其$lowbit(x)$位前保持不变，$lowbit$位的1改为0，$lowbit$位后枚举的是除了全0以外的所有情况。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;下图中展示的是$f[20]$以内的数组结构。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgse.com/i/piRrITH&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://z1.ax1x.com/2023/12/10/piRrITH.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;piRrITH.png&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其中，黑色数字为下标$x$，红色字为$lowbit(x)$。数字上方对应的绿色节点是$f[x]$存储了哪些项的和。&lt;/p&gt;
&lt;p&gt;以$f[5]$为例，如果改动了$f[5]$的数字，那么会影响到$f[6],f[8],f[16]$的值.&lt;/p&gt;
&lt;p&gt;我们可以得到以下结论：&lt;/p&gt;
&lt;p&gt;当改动树状数组中一项的值时，以这项值的下标加上$lowbit(x)$的值作为下标的数组内容也会发生改变。即：&lt;/p&gt;
&lt;p&gt;$$
f[x]改变，f[x+lowbit(x)]也改变。
$$&lt;/p&gt;
&lt;p&gt;由此，我们可以得到修改树状数组中元素的模板：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f[p] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; k;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; lowbit(p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//将下标p对应的值增加k
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;树状数组还可以求前缀和。例如：&lt;/p&gt;
&lt;p&gt;以$x=58$为例，$lowbit(x)=2,f[58]=a[57]+a[58]$.&lt;/p&gt;
&lt;p&gt;此时令$x=56$，$lowbit(x)=8,f[56]=a[56]+a[55]+&amp;hellip;+a[50]+a[49]$.&lt;/p&gt;
&lt;p&gt;以此类推，分别令$x=48$，$x=32$，并将其全部相加，即可得到$1$至$58$项的和。&lt;/p&gt;
&lt;p&gt;很容易发现，$x$需要以$lowbit(x)$为间隔向下递减求和。&lt;/p&gt;
&lt;p&gt;由此，我们可以得到其模板：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; f[p];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; lowbit(p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//求p的前綴和
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;求区间$[L,R]$的和，同前缀和一样，用如下方法求得即可：&lt;/p&gt;
&lt;p&gt;$$
s=f[L]-f[R-1]
$$&lt;/p&gt;
&lt;p&gt;树状数组整体复杂度约为$O(\log n)$.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;板子题：&lt;a class=&#34;link&#34; href=&#34;https://www.luogu.com.cn/problem/P3374&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;P3374 【模板】树状数组 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AC Code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//20231210 @ Hydro.ac
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ll;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; MAXN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;500005&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n,m,k,a[MAXN],s[MAXN],f[MAXN],x,y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lowbit&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ans&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		ans&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;f[p];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		p&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;lowbit(p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ans;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		f[p]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;k;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		p&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;lowbit(p);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ios&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sync_with_stdio(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);cin.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);cout.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;a[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		s[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;s[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;a[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		f[i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;s[i]&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;s[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;lowbit(i)];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(m&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; op;cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;op;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(op&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;k;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			add(x,k);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(op&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;sum(y)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;sum(x&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Ref.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我的老师的课件（）&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>拓扑排序</title>
        <link>http://xfrozenx.top/post/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</link>
        <pubDate>Mon, 06 Nov 2023 22:26:37 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://iai.sh.cn/problem/727&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IAI727 202310月赛丙组T5 先修课程&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;题目大意&#34;&gt;题目大意&lt;/h2&gt;
&lt;p&gt;一个有向图，有$n$个节点$m$条边，输入$n$和$m$和每条边的起点和终点。&lt;/p&gt;
&lt;p&gt;判断有向图的所有点是否都能在拓扑序中。能就输出Valid，否则输出Invalid。&lt;/p&gt;
&lt;h2 id=&#34;题解&#34;&gt;题解&lt;/h2&gt;
&lt;p&gt;看到原题有&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中的第$i$条约束要求在学习第$y_i$ 门课程之前，必须先修完第$x_i$门课程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样的优雅表述，判断可以用拓扑排序来解。&lt;/p&gt;
&lt;p&gt;拓扑排序是通过按照某个拓扑序的方法来遍历一张有向图。举个例子：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgse.com/i/pil0MIH&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://z1.ax1x.com/2023/11/06/pil0MIH.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pil0MIH.png&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是一张有5个结点的有向图。遵循的原则是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当某个点的所有前驱节点都已被遍历时，这个点就可以被遍历。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;（可能不是前驱，但意思等同于前驱）&lt;/p&gt;
&lt;p&gt;例如，这张图中，1没有前驱节点。可以先遍历1，随后3没有别的前驱了，需要遍历3。此时点2的所有前驱都被遍历，可以遍历点2。此时4的所有前驱都被遍历，可以遍历点4。此时，5的前驱即3和4都被遍历，可以遍历5。本图的一种拓扑序即为1 3 2 4 5。&lt;/p&gt;
&lt;p&gt;一张图可能有多个拓扑序。例如将本图中1到3的边删掉，就可以有1 3 2 4 5和3 1 2 4 5两个拓扑序。&lt;/p&gt;
&lt;p&gt;回到本题。题目说的矛盾即为存在一个点无法被拓扑序遍历到。&lt;/p&gt;
&lt;p&gt;例如样例1的图，简单画一下就可以发现它没有任何一个节点是没有前驱节点的，拓扑序无从建起，自然是Invalid。&lt;/p&gt;
&lt;p&gt;那么推广一下，思路出来了：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为图进行一次按照拓扑序的遍历，看看是否能够遍历到每一个点。如果不能遍历到每一个点，就是存在矛盾，输出Invalid。否则Valid。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;p&gt;用一个邻接表来存储有向图。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; MAXN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;200005&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v[MAXN];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先输入$n$,$m$的值，并建图。&lt;/p&gt;
&lt;p&gt;注意到，判断一个点是否有前驱，可以通过存储其入度的数量来简单判断。如果它的入度数量为0，那么它没有前驱。所以定义一个数组来存储某个点的入度数量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;m;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a,b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	v[a].push_back(b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	d[b]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//存入度数量的数组 int类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看到刚才举的例子，当点1被遍历后，它下一个点可以选择遍历点2或者点3。但是点2还有别的前驱，点3没有了。所以遍历点3。&lt;/p&gt;
&lt;p&gt;那么这样，就可以通过bfs，将遍历到的点指向的点的入度都减去1，即”消去一条边“。当指向的点入度变成0的时候，入队，对它bfs。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;d[i])q.push(i);&lt;span style=&#34;color:#75715e&#34;&gt;//初始化 找拓扑序起点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;q.front();q.pop();&lt;span style=&#34;color:#75715e&#34;&gt;//bfs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//记录遍历了多少个点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;v[x].size();i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[x][i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		d[&lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;&lt;span style=&#34;color:#75715e&#34;&gt;//消边
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;d[&lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt;])q.push(&lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;//如果指向的点没有别的前驱了就入队
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;按照思路，我们统计一下遍历了多少个点，如果$cnt==n$，那么Valid。否则Invalid。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;((cnt&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;n)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Valid&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;AC Code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//20231106 @ iai.sh.cn
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ll;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; MAXN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;200005&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n,m,d[MAXN],cnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vector&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; v[MAXN];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;queue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; q;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ios&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;sync_with_stdio(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);cin.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);cout.tie(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// freopen(&amp;#34;1.txt&amp;#34;,&amp;#34;r&amp;#34;,stdin);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;m;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a,b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		v[a].push_back(b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		d[b]&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;d[i])q.push(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;q.empty())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;q.front();q.pop();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;v[x].size();i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v[x][i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			d[&lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;d[&lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt;])q.push(&lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;((cnt&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;n)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Valid&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>时间复杂度</title>
        <link>http://xfrozenx.top/post/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
        <pubDate>Tue, 12 Sep 2023 22:02:25 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
        <description>&lt;p&gt;#OI - 时间复杂度&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;单循环&lt;/p&gt;
&lt;p&gt;eg Code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;次数&lt;/th&gt;
&lt;th&gt;$0$&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;条件（i&lt;em&gt;i&lt;/em&gt;i）&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2^3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;p&gt;规律：当执行至第$k$次时，条件数字即为$k^3$.&lt;/p&gt;
&lt;p&gt;设$k^3\leq n$。令$n\rightarrow\infty$，则$k^3=n$.&lt;/p&gt;
&lt;p&gt;则$k=\sqrt[3]{n}$.此算法的时间复杂度即为$O(\sqrt{n})$.（略去了常数因子）&lt;/p&gt;
&lt;p&gt;例2&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;次数&lt;/th&gt;
&lt;th&gt;$0$&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;条件（i）&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2^2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;规律：同上，$2^k=n$，$k=\log_2n$.&lt;/p&gt;
&lt;p&gt;$\therefore O(\log n)$.&lt;/p&gt;
&lt;p&gt;例3&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;条件为$(x+1)^2$，同样列表可知$(k+1)^2=n$，$k=\sqrt{n}-1$.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在时间复杂度中，常数项一般略去。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$\therefore O(\sqrt{n})$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多层循环&lt;/p&gt;
&lt;p&gt;情况1 - 外层不影响内层&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; k &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; k &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            count&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可看作是两个单循环。&lt;/p&gt;
&lt;p&gt;先计算外循环。同理列表，&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;次数&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;条件&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;故$2^k=n$，$k=\log_2n$.&lt;/p&gt;
&lt;p&gt;内循环同理列表，$O(n)$.&lt;/p&gt;
&lt;p&gt;整体算法的时间复杂度为内外循环相乘，$n\log_2n$.&lt;/p&gt;
&lt;p&gt;此处注意，由于换底公式，$\log_an$与$\log_bn$仅有一个因子不同，故在计算时间复杂度时不论对数的底。&lt;/p&gt;
&lt;p&gt;算法的时间复杂度为$O(n\log n)$.&lt;/p&gt;
&lt;p&gt;情况2 - 外层影响内层&lt;/p&gt;
&lt;p&gt;即内层的条件与外层有关。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, i, j;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            m&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先介绍一些公式：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=1}^ni=\frac{n(n+1)}{2}$$
$$
\sum_{i=1}^ni^2=\frac{n(n+1)(2n+1)}{6}
$$&lt;/p&gt;
&lt;p&gt;特殊地，对于常数列求和：&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=1}^nk=kn
$$&lt;/p&gt;
&lt;p&gt;那么对于此题，可知：&lt;/p&gt;
&lt;p&gt;外层循环的循环次数为$\sum_{i=1}^n$，内层为$\sum_{j=1}^{2i}1$。&lt;/p&gt;
&lt;p&gt;两式相乘，得到&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=1}^n\sum_{j=1}^{2i}1=\sum_{i=1}^n2i
$$$$
由公式1，原式=\frac{n(n+1)}{2}
$$&lt;/p&gt;
&lt;p&gt;故总共执行$\frac{n^2+n}{2}$次。时间复杂度$O(n^2)$.（取最高次）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在计算好语句块的执行次数后，需要注意在整理成时间复杂度时略去常数因子，如$\log_2n$的底、$\sqrt[3]n$的根指数等，写成$O(\log n)$、$O(\sqrt n)$.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>递归、深搜及其优化</title>
        <link>http://xfrozenx.top/post/%E9%80%92%E5%BD%92%E6%B7%B1%E6%90%9C%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</link>
        <pubDate>Thu, 13 Jul 2023 17:08:22 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/%E9%80%92%E5%BD%92%E6%B7%B1%E6%90%9C%E5%8F%8A%E5%85%B6%E4%BC%98%E5%8C%96/</guid>
        <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一组一起执行一个任务的语句。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;返回类型&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;函数名&lt;/span&gt;(&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;参数类型&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;参数名&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,..,&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;参数类型&lt;/span&gt;n &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;参数名&lt;/span&gt;n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//函数体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;返回值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//对于void函数，不存在返回值。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自己调用自己的函数&lt;/p&gt;
&lt;p&gt;eg. 阶乘&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fact&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; fact(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;递归的一般形式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(arg1, arg2...)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;特殊情况&lt;/span&gt; or &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;边界条件&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 处理
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; xxx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 递归操作；
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; xxx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 对于void函数，直接使用return;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;step型递归&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;例题：天平平衡问题&lt;/p&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;你有n个重量不同的砝码和一个天平，每个砝码可以放在左盘或者右盘或者不放。砝码重量为 $w_1,w_2,&amp;hellip;,w_n$ ，问有多少种放置砝码的方式，使得天平平衡?（两边都不放任何砝码也算一种平衡方式）&lt;/p&gt;
&lt;h2 id=&#34;输入格式&#34;&gt;输入格式&lt;/h2&gt;
&lt;p&gt;第 1 行，1 个正整数 $&lt;em&gt;n&lt;/em&gt;$ 。 第 2 行，$&lt;em&gt;n&lt;/em&gt;$ 个正整数 $w_1,w_2,&amp;hellip;w_n$，以空格分隔。&lt;/p&gt;
&lt;h2 id=&#34;输出格式&#34;&gt;输出格式&lt;/h2&gt;
&lt;p&gt;输出使得天平平衡的放置方案数。&lt;/p&gt;
&lt;h2 id=&#34;输入输出样例&#34;&gt;输入输出样例&lt;/h2&gt;
&lt;h2 id=&#34;输入数据-1&#34;&gt;输入数据 1&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;5
1 2 3 5 6
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;输出数据-1&#34;&gt;输出数据 1&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;13
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;数据范围&#34;&gt;数据范围&lt;/h2&gt;
&lt;p&gt;对于 $100%$ 的数据，满足 $1\leq n\leq13,1\leq w_i\leq100$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AC Code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 20230712 @ Hydro.ac
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n, w[&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;], ans;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; wl, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; wr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (p &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; n) &lt;span style=&#34;color:#75715e&#34;&gt;// 边界条件：如果已经枚举到超过n了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (wl &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; wr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ans&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 答案++
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 三种情况分别枚举递归
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    find(p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, wl &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; w[p], wr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    find(p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, wl, wr &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; w[p]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    find(p &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, wl, wr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//这里的wl和wr也可以用全局变量写
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//在调用之前要记得wl+=w[p]，调用完要减回去。称作回溯操作。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cin &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; w[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    find(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;深度优先搜索 DFS&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;听起来好高大上&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;利用递归函数，枚举所有的情况找到答案。&lt;/li&gt;
&lt;li&gt;剪枝
&lt;ol&gt;
&lt;li&gt;对于中途发现已经不可能的情况直接跳出这一部分搜索。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;例题：P2089 烤鸡&lt;/p&gt;
&lt;h1 id=&#34;烤鸡&#34;&gt;烤鸡&lt;/h1&gt;
&lt;h2 id=&#34;题目背景&#34;&gt;题目背景&lt;/h2&gt;
&lt;p&gt;猪猪 Hanke 得到了一只鸡。&lt;/p&gt;
&lt;h2 id=&#34;题目描述-1&#34;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;猪猪 Hanke 特别喜欢吃烤鸡（本是同畜牲，相煎何太急！）Hanke 吃鸡很特别，为什么特别呢？因为他有 10 种配料（芥末、孜然等），每种配料可以放 1 到 3 克，任意烤鸡的美味程度为所有配料质量之和。&lt;/p&gt;
&lt;p&gt;现在， Hanke 想要知道，如果给你一个美味程度 $n$ ，请输出这 $10$ 种配料的所有搭配方案。&lt;/p&gt;
&lt;h2 id=&#34;输入格式-1&#34;&gt;输入格式&lt;/h2&gt;
&lt;p&gt;一个正整数 $n$，表示美味程度。&lt;/p&gt;
&lt;h2 id=&#34;输出格式-1&#34;&gt;输出格式&lt;/h2&gt;
&lt;p&gt;第一行，方案总数。&lt;/p&gt;
&lt;p&gt;第二行至结束，10 个数，表示每种配料所放的质量，按字典序排列。&lt;/p&gt;
&lt;p&gt;如果没有符合要求的方法，就只要在第一行输出一个 0。&lt;/p&gt;
&lt;h2 id=&#34;样例-1&#34;&gt;样例 #1&lt;/h2&gt;
&lt;h3 id=&#34;样例输入-1&#34;&gt;样例输入 #1&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;样例输出-1&#34;&gt;样例输出 #1&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;10
1 1 1 1 1 1 1 1 1 2
1 1 1 1 1 1 1 1 2 1
1 1 1 1 1 1 1 2 1 1
1 1 1 1 1 1 2 1 1 1
1 1 1 1 1 2 1 1 1 1
1 1 1 1 2 1 1 1 1 1
1 1 1 2 1 1 1 1 1 1
1 1 2 1 1 1 1 1 1 1
1 2 1 1 1 1 1 1 1 1
2 1 1 1 1 1 1 1 1 1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;提示&#34;&gt;提示&lt;/h2&gt;
&lt;p&gt;对于 100% 的数据，$n \leq 5000$。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AC Code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//20230712 @ Hydro.ac
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//不写注释了。我自己都不想再看一遍这代码。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n,counter&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,u[&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;],u2[&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dfs&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; p,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sum)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(p&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(sum&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            counter&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                u[counter][i]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;u2[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        u2[p]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dfs(p&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,sum&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;n;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dfs(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;counter&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;counter;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;u[i][j]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>基础数论</title>
        <link>http://xfrozenx.top/post/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/</link>
        <pubDate>Tue, 11 Jul 2023 19:22:52 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/%E5%9F%BA%E7%A1%80%E6%95%B0%E8%AE%BA/</guid>
        <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;质数判断&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;让$i$从2枚举到$\sqrt{N}$，若对每一个$i$$n%i\neq0$，则是质数。否则是合数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n;&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; prime&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(d&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            prime&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false;&lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;筛法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用于计算哪些数字是素数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用bool型变量作为桶，记录某个数是否为素数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;埃式筛法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将isPrime[N]数组初始化为false，即均为质数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;isPrime[0]=isPrime[1]=true;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从2开始枚举，若是质数，将其所有的倍数记录为合数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;isprime[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; isprime[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;isprime[i])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; n; j &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; i)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            isprime[j] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线性筛法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用每个数的最小质因数进行标记。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code&lt;/p&gt;
&lt;p&gt;（有点问题，之后补）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GCD &amp;amp; LCM&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GCD
&lt;ol&gt;
&lt;li&gt;$GCD(a,b)=GCD(b,a%b)$。（辗转相除）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;LCM
&lt;ol&gt;
&lt;li&gt;$LCM(a,b)\times GCD(a,b)=a\times b$.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速幂&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;$ans=a^b%p$时，快速求ans。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ans &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;*=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#f92672&#34;&gt;%=&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; ans;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>前缀和 差分 尺取法</title>
        <link>http://xfrozenx.top/post/%E5%89%8D%E7%BC%80%E5%92%8C-%E5%B7%AE%E5%88%86-%E5%B0%BA%E5%8F%96%E6%B3%95/</link>
        <pubDate>Fri, 07 Jul 2023 18:33:08 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/%E5%89%8D%E7%BC%80%E5%92%8C-%E5%B7%AE%E5%88%86-%E5%B0%BA%E5%8F%96%E6%B3%95/</guid>
        <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;前缀和&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Def. 某数组前若干数的和&lt;/p&gt;
&lt;p&gt;设一数组$a$，$s[1]=a[1]$，$s[2]=a[1]+a[2]$，&lt;/p&gt;
&lt;p&gt;$s[n]=a[1]+a[2]+&amp;hellip;+a[n-1]+a[n]$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用此方法求区间$[l,r]$的和&lt;/p&gt;
&lt;p&gt;$$
s_{lr}=s[r]-s[l-1]
$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相较于$for$循环求若干数的和，前缀和这一算法能将时间复杂度由$O(n)$降为$O(1)$。&lt;/p&gt;
&lt;p&gt;前缀和属于优化类算法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;差分&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Def. 是这个数与前一个数的差&lt;/p&gt;
&lt;p&gt;设一数组$a$，则有&lt;/p&gt;
&lt;p&gt;$$
d[1]=a[1]\d[2]=a[2]-a[1]\d[3]=a[3]-a[2]\d[n]=a[n]-a[n-1]
$$&lt;/p&gt;
&lt;p&gt;******&lt;strong&gt;注意！！！$a[0]=0$.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;差分多用于对区间$[l,r]$中的每一项都进行相同的修改（加减）&lt;/p&gt;
&lt;p&gt;例题可见 &lt;a class=&#34;link&#34; href=&#34;http://Hydro.ac&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hydro&lt;/a&gt; B0409或洛谷P2367。&lt;/p&gt;
&lt;p&gt;对于普通的数组，使某区间内的每一项进行相同加减，需要用$for$循环，做如下操作&lt;/p&gt;
&lt;p&gt;$$
a[l]+=c\a[l+1]+=c\&amp;hellip;&amp;hellip;\O(n)
$$&lt;/p&gt;
&lt;p&gt;对于差分数组，只需要做&lt;/p&gt;
&lt;p&gt;$$
d[l]+=c\d[r+1]-=c\O(1)
$$&lt;/p&gt;
&lt;p&gt;故与前缀和一样，是优化类算法。同时，差分算法是前缀和的逆运算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据差分数列反求出修改后的原数列&lt;/p&gt;
&lt;p&gt;可使用如下代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt;n;i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        d[i]&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;d[i&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;d[i]&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;del&gt;我好像也不太理解 但是先背着吧&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二维前缀和&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;即针对二维的$a$数组的前缀和操作。&lt;/p&gt;
&lt;p&gt;偷懒直接上图。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgse.com/i/pCcyOFf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://s1.ax1x.com/2023/07/07/pCcyOFf.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pCcyOFf.png&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgse.com/i/pCcyXY8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://s1.ax1x.com/2023/07/07/pCcyXY8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;pCcyXY8.png&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尺取法（Two pointers）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无法评述。参见例题。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;p1147-连续自然数和&#34;&gt;P1147 连续自然数和&lt;/h1&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;对一个给定的正整数 $M$，求出所有的连续的正整数段（每一段至少有两个数），这些连续的自然数段中的全部数之和为 $M$。&lt;/p&gt;
&lt;p&gt;例子：$1998+1999+2000+2001+2002 = 10000$，所以从 $1998$ 到 $2002$ 的一个自然数段为 $M=10000$ 的一个解。&lt;/p&gt;
&lt;h2 id=&#34;输入格式&#34;&gt;输入格式&lt;/h2&gt;
&lt;p&gt;包含一个整数的单独一行给出 $M$ 的值（$10 \le M \le 2,000,000$）。&lt;/p&gt;
&lt;h2 id=&#34;输出格式&#34;&gt;输出格式&lt;/h2&gt;
&lt;p&gt;每行两个正整数，给出一个满足条件的连续正整数段中的第一个数和最后一个数，两数之间用一个空格隔开，所有输出行的第一个按从小到大的升序排列，对于给定的输入数据，保证至少有一个解。&lt;/p&gt;
&lt;h2 id=&#34;样例-1&#34;&gt;样例 #1&lt;/h2&gt;
&lt;h3 id=&#34;样例输入-1&#34;&gt;样例输入 #1&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;10000
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;样例输出-1&#34;&gt;样例输出 #1&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;18 142
297 328
388 412
1998 2002
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AC Code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//20230707 @ Hydro.ac
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//尺取法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;namespace&lt;/span&gt; std;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; m,sum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; l&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,r&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;r&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;m;r&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;r;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(sum&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;m)&lt;span style=&#34;color:#75715e&#34;&gt;//如果总和大于m
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sum&lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt;l;&lt;span style=&#34;color:#75715e&#34;&gt;//在总和中删掉起点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            l&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(sum&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;m)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cout&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;l&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;endl;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>二分查找和二分答案</title>
        <link>http://xfrozenx.top/post/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%92%8C%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/</link>
        <pubDate>Wed, 05 Jul 2023 18:31:21 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%92%8C%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/</guid>
        <description>&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;二分查找（查找特定值）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义查找区间的左右端点$l$和$r$，查找区间$[l,r]$.&lt;/li&gt;
&lt;li&gt;当$l\leq r$时，计算中间值$mid=(l+r)/2=l+(r-l)/2$.
&lt;ol&gt;
&lt;li&gt;若$mid=k$，则找到答案&lt;/li&gt;
&lt;li&gt;若$mid&amp;gt;k$，则设$r=mid-1$，继续搜索&lt;/li&gt;
&lt;li&gt;若$mid&amp;lt;k$，则设$l=mid+1$，继续搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;当$l&amp;gt;r$时，原区间$[l.r]$内不存在$k$。&lt;/li&gt;
&lt;li&gt;模板代码：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; r)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; r) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[mid] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 找到此数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二分查找（查找第一个满足条件的位置）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始赋值：$l$是一个不满足条件的位置，$r$是一个满足条件的位置。&lt;/li&gt;
&lt;li&gt;当$l+1&amp;lt;r$，即$l$和$r$不相邻时，计算中间端点$mid=(l+r)/2=l+(r-l)/2$.
&lt;ol&gt;
&lt;li&gt;若$mid$满足条件，设$r=mid$，继续搜索&lt;/li&gt;
&lt;li&gt;若$mid$不满足条件，设$l=mid$，继续搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;当$l+1=r$时，$r$为第一个满足条件的位置。&lt;/li&gt;
&lt;li&gt;模板代码&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; r)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (l &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; r) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (a[mid] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; k)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        l &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二分答案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用二分查找的思路，通过对if的条件加以修改，得到答案，即为二分查找。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Carpet Extra</title>
        <link>http://xfrozenx.top/post/carpet-extra/</link>
        <pubDate>Sun, 02 Jul 2023 11:41:46 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/carpet-extra/</guid>
        <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;carpet-extra&#34;&gt;Carpet Extra&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/gnembon/carpet-extra/actions/workflows/devbuild.yml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://github.com/gnembon/carpet-extra/actions/workflows/devbuild.yml/badge.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Development Builds&#34;
	
	
&gt;&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.curseforge.com/minecraft/mc-mods/carpet-extra&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;http://cf.way2muchnoise.eu/full_349240_downloads.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;CurseForge downloads&#34;
	
	
&gt;&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://modrinth.com/mod/carpet-extra&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://img.shields.io/modrinth/dt/carpet-extra?label=Modrinth%20downloads&amp;amp;logo=modrinth&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Modrinth downloads&#34;
	
	
&gt;&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/gnembon/carpet-extra/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://img.shields.io/github/downloads/gnembon/carpet-extra/total?label=Github%20downloads&amp;amp;logo=github&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitHub downloads&#34;
	
	
&gt;&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/gnembon/carpet-extra/graphs/contributors&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://img.shields.io/github/contributors/gnembon/carpet-extra?label=Contributors&amp;amp;logo=github&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;GitHub contributors&#34;
	
	
&gt;&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://discord.gg/gn99m4QRY4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://badgen.net/discord/online-members/gn99m4QRY4?icon=discord&amp;amp;label=Discord&amp;amp;list=what&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Discord&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Carpet Extra is an extension adding extra features to &lt;a class=&#34;link&#34; href=&#34;https://github.com/gnembon/fabric-carpet&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Fabric Carpet&lt;/a&gt;, like countless new dispenser behaviours, new ways to get resources in a renewable way and many others!&lt;/p&gt;
&lt;p&gt;For its enabled dispenser behaviours it also adds a new &lt;a class=&#34;link&#34; href=&#34;http://xfrozenx.top/docs/scarpet/ScarpetEvents.md&#34; &gt;Scarpet event&lt;/a&gt; that triggers when those happen, allowing you to further customize them.&lt;/p&gt;
&lt;h2 id=&#34;more-extensions&#34;&gt;More extensions&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re looking for Carpet autocrafting table, it has been moved to a standalone extension you can find on &lt;a class=&#34;link&#34; href=&#34;https://github.com/gnembon/carpet-autoCraftingTable&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;its repository on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are also lots of other carpet extensions out there, adding countless new rules and functionality! You can find a list of them &lt;a class=&#34;link&#34; href=&#34;https://github.com/gnembon/fabric-carpet/wiki/List-of-Carpet-extensions&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;in the Carpet wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;carpet-extra-features&#34;&gt;Carpet Extra Features&lt;/h1&gt;
&lt;h1 id=&#34;carpet-mod-settings&#34;&gt;Carpet Mod Settings&lt;/h1&gt;
&lt;h2 id=&#34;accurateblockplacement&#34;&gt;accurateBlockPlacement&lt;/h2&gt;
&lt;p&gt;Client can provide alternative block placement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;SURVIVAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;autocraftingdropper&#34;&gt;autoCraftingDropper&lt;/h2&gt;
&lt;p&gt;Auto-crafting dropper&lt;br&gt;
If a dropper points into a crafting table and contains a valid 3x3 crafting recipe, firing that&lt;br&gt;
dropper will cause it to craft (drop as item) that recipe.&lt;br&gt;
Overrides comparators so they indicate number of filled slots instead.&lt;br&gt;
Also makes hoppers, droppers and dispensers input max 1 item per slot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;CREATIVE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;betterbonemeal&#34;&gt;betterBonemeal&lt;/h2&gt;
&lt;p&gt;Bonemeal can be used to grow sugarcane, cactus and lily pads.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;SURVIVAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;blazemeal&#34;&gt;blazeMeal&lt;/h2&gt;
&lt;p&gt;Blaze powder fertilizes netherwart.&lt;br&gt;
Via dispenser or player right click actions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;SURVIVAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;blockstatesyncing&#34;&gt;blockStateSyncing&lt;/h2&gt;
&lt;p&gt;Fixes block states in F3 debug mode not updating for some blocks.&lt;br&gt;
May cause increased network traffic.&lt;br&gt;
Works with cactus, sugar cane, saplings, hoppers, dispensers and droppers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;chickenshearing&#34;&gt;chickenShearing&lt;/h2&gt;
&lt;p&gt;Chickens can be sheared to get feathers. Beware! every time u shear a chicken, it gets damaged!&lt;br&gt;
Baby chickens can&amp;rsquo;t be sheared.&lt;br&gt;
Also works with dispensers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;clericsfarmwarts&#34;&gt;clericsFarmWarts&lt;/h2&gt;
&lt;p&gt;Clerics can warm nether farts.&lt;br&gt;
This will also allow them to pick up wart items, as well as pathfind to soulsand.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;commandping&#34;&gt;commandPing&lt;/h2&gt;
&lt;p&gt;Enables &lt;code&gt;/ping&lt;/code&gt; for players to get their ping.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;COMMAND&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Additional notes:
&lt;ul&gt;
&lt;li&gt;It has an accompanying command&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;comparatorbetteritemframes&#34;&gt;comparatorBetterItemFrames&lt;/h2&gt;
&lt;p&gt;Allows Comparators to see item frames that are horizontal in front of them and on top the the block in front of them&lt;br&gt;
Behind: Allows comparators to detect item frames in the block behind them&lt;br&gt;
Lenient: Allows comparators to detect any item frames within the block behind a full block&lt;br&gt;
Extended: Allows comparators to detect item frames on a full block behind the comparator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;ComparatorOptions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;vanilla&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;vanilla&lt;/code&gt;, &lt;code&gt;behind&lt;/code&gt;, &lt;code&gt;lenient&lt;/code&gt;, &lt;code&gt;extended&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;comparatorreadsclock&#34;&gt;comparatorReadsClock&lt;/h2&gt;
&lt;p&gt;Allows Comparators to read the daytime instead of the rotation of clocks in item frames.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;creeperspawninginjungletemples&#34;&gt;creeperSpawningInJungleTemples&lt;/h2&gt;
&lt;p&gt;Only creepers spawn in jungle temples.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;disableplayercollision&#34;&gt;disablePlayerCollision&lt;/h2&gt;
&lt;p&gt;Disables player entity collision.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;CREATIVE&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispenserplacesblocks&#34;&gt;dispenserPlacesBlocks&lt;/h2&gt;
&lt;p&gt;Dispensers can place blocks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;CREATIVE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispenserscarvepumpkins&#34;&gt;dispensersCarvePumpkins&lt;/h2&gt;
&lt;p&gt;Dispensers containing shears can carve pumpkins.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispensersfeedanimals&#34;&gt;dispensersFeedAnimals&lt;/h2&gt;
&lt;p&gt;Dispensers can feed animals if given their breeding item.&lt;br&gt;
Can also feed flowers to brown mooshrooms to give them a suspicious stew effect&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispensersfillminecarts&#34;&gt;dispensersFillMinecarts&lt;/h2&gt;
&lt;p&gt;Minecarts can be filled with hoppers, chests, tnt and furnace.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXPERIMENTAL&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispensersmilkanimals&#34;&gt;dispensersMilkAnimals&lt;/h2&gt;
&lt;p&gt;Dispensers with empty buckets can milk cows/mooshrooms/goats, and get mushroom/suspicious stew from mooshrooms with bowls.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXPERIMENTAL&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispensersplaceboatsonice&#34;&gt;dispensersPlaceBoatsOnIce&lt;/h2&gt;
&lt;p&gt;Dispensers can place boats on ice&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispensersplayrecords&#34;&gt;dispensersPlayRecords&lt;/h2&gt;
&lt;p&gt;Dispensers can play records if there&amp;rsquo;s a jukebox in front of them.&lt;br&gt;
If a record already exists in the jukebox, it gets placed back in the dispenser.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispenserspotplants&#34;&gt;dispensersPotPlants&lt;/h2&gt;
&lt;p&gt;Dispensers can put flowers in flower pots&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispensersstripblocks&#34;&gt;dispensersStripBlocks&lt;/h2&gt;
&lt;p&gt;Dispensers with axes can strip blocks&lt;br&gt;
Can strip logs, remove oxidation, and remove wax&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispenserstillsoil&#34;&gt;dispensersTillSoil&lt;/h2&gt;
&lt;p&gt;Dispensers with hoes can till soil.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispenserstogglethings&#34;&gt;dispensersToggleThings&lt;/h2&gt;
&lt;p&gt;Dispensers containing a stick can toggle/activate things.&lt;br&gt;
Works with buttons, redstone, noteblocks, comparators, repeaters,&lt;br&gt;
daylight detectors, etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dispensersusecauldrons&#34;&gt;dispensersUseCauldrons&lt;/h2&gt;
&lt;p&gt;Dispensers can empty/fill cauldrons with buckets or bottles, and undye leather armor/shulker boxes/banners&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;doubleretraction&#34;&gt;doubleRetraction&lt;/h2&gt;
&lt;p&gt;Re-adds 1.8 double retraction to pistons.&lt;br&gt;
Gives pistons the ability to double retract without side effects.&lt;br&gt;
Fixes &lt;a class=&#34;link&#34; href=&#34;https://bugs.mojang.com/browse/MC-88959&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MC-88959&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dragoneggbedrockbreaking&#34;&gt;dragonEggBedrockBreaking&lt;/h2&gt;
&lt;p&gt;Reintroduce the Dragon Egg Bedrock breaking bug from 1.12.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;emptyshulkerboxstackalways&#34;&gt;emptyShulkerBoxStackAlways&lt;/h2&gt;
&lt;p&gt;Empty Shulker Boxes will always stack, even inside inventories.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;enderpearlchunkloading&#34;&gt;enderPearlChunkLoading&lt;/h2&gt;
&lt;p&gt;Allow horizontally moving Ender Pearls to load chunks as entity ticking.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fallingblockdispensers&#34;&gt;fallingBlockDispensers&lt;/h2&gt;
&lt;p&gt;Dispensers/Droppers with a block in front of them when powered will turn that block into a falling block&lt;br&gt;
dispenser &amp;amp; dropper give the same velocity to the falling block like they do in 22w13oneblockatatime&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;flowerpotchunkloading&#34;&gt;flowerPotChunkLoading&lt;/h2&gt;
&lt;p&gt;Placing a wither rose in a flowerpot will load that chunk.&lt;br&gt;
If u enable the rule the already existing chunks with flowerpots won&amp;rsquo;t be loaded.&lt;br&gt;
Also disabling the carpet rule won&amp;rsquo;t remove the loaded chunks, u need to manually unload them using the /forceload command.&lt;br&gt;
All the loaded chunks can be seen using &lt;code&gt;/forceload query&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hopperminecart8gtcooldown&#34;&gt;hopperMinecart8gtCooldown&lt;/h2&gt;
&lt;p&gt;Makes Hopper Minecarts have an 8gt cooldown like hoppers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;BUGFIX&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hopperminecartitemtransfer&#34;&gt;hopperMinecartItemTransfer&lt;/h2&gt;
&lt;p&gt;Allows Hopper Minecarts to transfer items into containers below them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;BUGFIX&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;maxspongerange&#34;&gt;maxSpongeRange&lt;/h2&gt;
&lt;p&gt;Maximum offset limit for sponge.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Suggested options: &lt;code&gt;7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;maxspongesuck&#34;&gt;maxSpongeSuck&lt;/h2&gt;
&lt;p&gt;Maximum water sucking for sponge.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Suggested options: &lt;code&gt;64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mobinfireconvertssandtosoulsand&#34;&gt;mobInFireConvertsSandToSoulsand&lt;/h2&gt;
&lt;p&gt;If a living entity dies on sand with fire on top the sand will convert into soul sand.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pistonredirectsredstone&#34;&gt;pistonRedirectsRedstone&lt;/h2&gt;
&lt;p&gt;Pistons and sticky pistons redirect redstone&lt;br&gt;
When retracting, they will blink visually&lt;br&gt;
but that&amp;rsquo;s only to minimize changes required for it to work&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reloadsuffocationfix&#34;&gt;reloadSuffocationFix&lt;/h2&gt;
&lt;p&gt;Won&amp;rsquo;t let mobs glitch into blocks when reloaded.&lt;br&gt;
Can cause slight differences in mobs behaviour.&lt;br&gt;
Fixes &lt;a class=&#34;link&#34; href=&#34;https://bugs.mojang.com/browse/MC-2025&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MC-2025&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;BUGFIX&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;renewableendstone&#34;&gt;renewableEndstone&lt;/h2&gt;
&lt;p&gt;Dragon&amp;rsquo;s breath from dispensers convert cobblestone to end stone.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;, &lt;code&gt;DISPENSER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;renewableice&#34;&gt;renewableIce&lt;/h2&gt;
&lt;p&gt;Multiple ice crushed by falling anvils make denser ice.&lt;br&gt;
frosted turns into normal, normal into packed and packed into blue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;renewablenetherrack&#34;&gt;renewableNetherrack&lt;/h2&gt;
&lt;p&gt;Fire charges from dispensers convert cobblestone to netherrack.&lt;br&gt;
Credits: Skyrising&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;renewablesand&#34;&gt;renewableSand&lt;/h2&gt;
&lt;p&gt;Cobblestone crushed by falling anvils makes sand.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;renewablewitherskeletons&#34;&gt;renewableWitherSkeletons&lt;/h2&gt;
&lt;p&gt;Skeletons turn into wither skeletons when struck by lightning.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;repeaterpriorityfix&#34;&gt;repeaterPriorityFix&lt;/h2&gt;
&lt;p&gt;Quick pulses won&amp;rsquo;t get lost in repeater setups.&lt;br&gt;
Probably brings back pre 1.8 behaviour.&lt;br&gt;
Fixes &lt;a class=&#34;link&#34; href=&#34;https://bugs.mojang.com/browse/MC-54711&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MC-54711&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;BUGFIX&lt;/code&gt;, &lt;code&gt;EXPERIMENTAL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scaffoldingdistance&#34;&gt;scaffoldingDistance&lt;/h2&gt;
&lt;p&gt;Max distance for scaffolding.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Suggested options: &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Additional notes:
&lt;ul&gt;
&lt;li&gt;You must choose a value from 0 to 7&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spiderjockeysdropgapples&#34;&gt;spiderJockeysDropGapples&lt;/h2&gt;
&lt;p&gt;Gives Spider jockeys a specified chance to drop enchanted golden apples.&lt;br&gt;
0 is the default setting, no enchanted golden apples will be dropped&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Integer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Suggested options: &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;50&lt;/code&gt;, &lt;code&gt;100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Additional notes:
&lt;ul&gt;
&lt;li&gt;You must choose a value from 0 to 100&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;strayspawninginigloos&#34;&gt;straySpawningInIgloos&lt;/h2&gt;
&lt;p&gt;Only strays spawn in igloos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;FEATURE&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;variablewooddelays&#34;&gt;variableWoodDelays&lt;/h2&gt;
&lt;p&gt;Variable delays on wooden components (buttons, pressure plates).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXTRAS&lt;/code&gt;, &lt;code&gt;FEATURE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;y0dragoneggbedrockbreaking&#34;&gt;y0DragonEggBedrockBreaking&lt;/h2&gt;
&lt;p&gt;Let dragon eggs break Y0 bedrock.&lt;br&gt;
Requires dragonEggBedrockBreaking to be set to true.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Default value: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allowed options: &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Categories: &lt;code&gt;EXPERIMENTAL&lt;/code&gt;, &lt;code&gt;EXTRAS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>算法的基本概念</title>
        <link>http://xfrozenx.top/post/%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
        <pubDate>Thu, 15 Jun 2023 22:55:55 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
        <description>&lt;ol&gt;
&lt;li&gt;算法是&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;一系列的计算步骤，用来将输入的数据转化成输出的结果。&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;特征：
&lt;ol&gt;
&lt;li&gt;有穷性&lt;/li&gt;
&lt;li&gt;确定性&lt;/li&gt;
&lt;li&gt;可行性&lt;/li&gt;
&lt;li&gt;有零个或多个输入&lt;/li&gt;
&lt;li&gt;至少有一个输出&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;描述方法：
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自然语言&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流程图
1.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;flowchart TD
	id1([&amp;#34;起止框（表示算法开始和结束）&amp;#34;])
	--&amp;gt;id2[&amp;#34;处理框（要处理的内容）&amp;#34;]
	--&amp;gt;id3[/&amp;#34;输入/输出框&amp;#34;/]
	--&amp;gt;id4{&amp;#34;判断框&amp;#34;}
	--&amp;gt;id5((&amp;#34;连接符&amp;#34;))
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;伪代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;基本控制结构
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;顺序结构&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;flowchart TD
A[&amp;#34;操作1&amp;#34;]--&amp;gt;B[&amp;#34;操作2&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分支结构&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;flowchart TD
A[&amp;#34;操作1&amp;#34;]--&amp;gt;B{&amp;#34;条件&amp;#34;}
B--&amp;gt;|是| C[&amp;#34;操作2&amp;#34;]
B--&amp;gt;|否| D[&amp;#34;操作3&amp;#34;]
C &amp;amp; D --&amp;gt;E[&amp;#34;分支外的操作&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;循环结构&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当循环&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;flowchart TD
	A{&amp;#34;条件&amp;#34;}
	A--&amp;gt;|是| B[&amp;#34;循环体&amp;#34;]
	B--&amp;gt;A
	A---&amp;gt;|否| C[&amp;#34;循环外的操作&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直到循环&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;flowchart TD
	A[&amp;#34;循环体&amp;#34;]--&amp;gt;B{&amp;#34;条件&amp;#34;}
	B--&amp;gt;|否|A
	B--&amp;gt;|是|C[&amp;#34;循环外的操作&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>信息技术与社会</title>
        <link>http://xfrozenx.top/post/hit-%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E4%B8%8E%E7%A4%BE%E4%BC%9A/</link>
        <pubDate>Mon, 29 May 2023 22:20:08 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/hit-%E4%BF%A1%E6%81%AF%E6%8A%80%E6%9C%AF%E4%B8%8E%E7%A4%BE%E4%BC%9A/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;信息技术革命促使信息社会到来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;农业社会—&amp;gt;工业社会—&amp;gt;信息社会&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信息社会是&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;以信息活动为基础&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;的社会。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本原则：以人为本、包容性、全面发展&lt;/li&gt;
&lt;li&gt;资源：信息、知识&lt;/li&gt;
&lt;li&gt;本质：以信息活动为基础&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信息社会的特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;信息经济
&lt;ol&gt;
&lt;li&gt;指以信息与知识的生产、分配、拥有、使用为主要特征的经济形态。&lt;/li&gt;
&lt;li&gt;是决定信息社会发展水平高低的最主要因素。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在线政务
&lt;ol&gt;
&lt;li&gt;指利用现代化信息技术实现社会管理和公共服务的&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;新型政府治理模式&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;特征：公开透明、高效治理、互动参与&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数字生活
&lt;ol&gt;
&lt;li&gt;体现在&lt;strong&gt;生活工具&lt;/strong&gt;、&lt;strong&gt;生活方式&lt;/strong&gt;、&lt;strong&gt;生活内容&lt;/strong&gt;的数字化。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;网络社会
&lt;ol&gt;
&lt;li&gt;是信息社会最典型的特征。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信息系统&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是指在社会活动中，以满足&lt;strong&gt;信息需求&lt;/strong&gt;为目标，以&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;现代信息技术&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;为手段，实现对信息有效&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;采集和输入、传输、存储、处理、输出和利用&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;而建立的包含&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;人、硬件、软件、数据&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;在内的综合系统。&lt;/li&gt;
&lt;li&gt;要素：人、硬件、软件、数据&lt;/li&gt;
&lt;li&gt;功能：信息的采集和输入、传输、存储、处理、输出和利用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Inferno T A2楼战术</title>
        <link>http://xfrozenx.top/post/inferno-t-a2%E6%A5%BC%E6%88%98%E6%9C%AF/</link>
        <pubDate>Sat, 27 May 2023 19:13:20 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/inferno-t-a2%E6%A5%BC%E6%88%98%E6%9C%AF/</guid>
        <description>&lt;p&gt;战术图：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgse.com/i/p9L1TJJ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://s1.ax1x.com/2023/05/27/p9L1TJJ.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;p9L1TJJ.png&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5人队伍，2人绿色，2人紫红色线路。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绿色线路的任务是&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;香蕉道：木桶火、闪；用于骚扰。&lt;/li&gt;
&lt;li&gt;回中路，补链接-包点隔断烟，准备提A1。&lt;/li&gt;
&lt;li&gt;中路给包点闪&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;&lt;strong&gt;紫红色线路的任务是：&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;侧道：vip火、中路烟（辅助绿色出中路）&lt;/li&gt;
&lt;li&gt;清空锅炉房，等绿色到位。&lt;/li&gt;
&lt;li&gt;烟囱闪，A1、A2同步。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Hello_world</title>
        <link>http://xfrozenx.top/post/hello_world/</link>
        <pubDate>Thu, 25 May 2023 22:36:21 +0800</pubDate>
        
        <guid>http://xfrozenx.top/post/hello_world/</guid>
        <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;bits/stdc++.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;inline-math-test&#34;&gt;Inline math test&lt;/h3&gt;
&lt;p&gt;When $ a \neq 0 $, we can find
$$
x=\frac{-b\pm\sqrt{b^2-4ac}}{2a}
$$
helloworld123456789
你好&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
